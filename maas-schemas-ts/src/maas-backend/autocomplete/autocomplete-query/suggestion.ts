/*

undefined
Response schema for autocomplete suggestion

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as UnitsGeo_ from '../../../core/components/units-geo';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/maas-backend/autocomplete/autocomplete-query/suggestion.json';

// GoogleMeta
// The purpose of this remains a mystery
export type GoogleMeta = t.Branded<
  {
    placeId?: string;
  },
  GoogleMetaBrand
>;
export type GoogleMetaC = t.BrandC<
  t.PartialC<{
    placeId: t.StringC;
  }>,
  GoogleMetaBrand
>;
export const GoogleMeta: GoogleMetaC = t.brand(
  t.partial({
    placeId: t.string,
  }),
  (
    x,
  ): x is t.Branded<
    {
      placeId?: string;
    },
    GoogleMetaBrand
  > => true,
  'GoogleMeta',
);
export interface GoogleMetaBrand {
  readonly GoogleMeta: unique symbol;
}

// RouterankMeta
// The purpose of this remains a mystery
export type RouterankMeta = t.Branded<
  {
    id?: string;
    lat?: UnitsGeo_.RelaxedLatitude;
    lon?: UnitsGeo_.RelaxedLongitude;
  },
  RouterankMetaBrand
>;
export type RouterankMetaC = t.BrandC<
  t.PartialC<{
    id: t.StringC;
    lat: typeof UnitsGeo_.RelaxedLatitude;
    lon: typeof UnitsGeo_.RelaxedLongitude;
  }>,
  RouterankMetaBrand
>;
export const RouterankMeta: RouterankMetaC = t.brand(
  t.partial({
    id: t.string,
    lat: UnitsGeo_.RelaxedLatitude,
    lon: UnitsGeo_.RelaxedLongitude,
  }),
  (
    x,
  ): x is t.Branded<
    {
      id?: string;
      lat?: UnitsGeo_.RelaxedLatitude;
      lon?: UnitsGeo_.RelaxedLongitude;
    },
    RouterankMetaBrand
  > => true,
  'RouterankMeta',
);
export interface RouterankMetaBrand {
  readonly RouterankMeta: unique symbol;
}

// Suggestion
// The default export. More information at the top.
export type Suggestion = t.Branded<
  {
    label?: string;
    addressId?: string;
    meta?: Record<string, unknown>;
  } & {
    label: Defined;
    meta: Defined;
  },
  SuggestionBrand
>;
export type SuggestionC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        label: t.StringC;
        addressId: t.StringC;
        meta: t.UnknownRecordC;
      }>,
      t.TypeC<{
        label: typeof Defined;
        meta: typeof Defined;
      }>,
    ]
  >,
  SuggestionBrand
>;
export const Suggestion: SuggestionC = t.brand(
  t.intersection([
    t.partial({
      label: t.string,
      addressId: t.string,
      meta: t.UnknownRecord,
    }),
    t.type({
      label: Defined,
      meta: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      label?: string;
      addressId?: string;
      meta?: Record<string, unknown>;
    } & {
      label: Defined;
      meta: Defined;
    },
    SuggestionBrand
  > => true,
  'Suggestion',
);
export interface SuggestionBrand {
  readonly Suggestion: unique symbol;
}

export default Suggestion;

// Success
