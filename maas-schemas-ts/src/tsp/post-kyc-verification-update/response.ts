/*

undefined
Response schema for post KYC verification update.

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import { nonEmptyArray } from 'io-ts-types/lib/nonEmptyArray';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/tsp/post-kyc-verification-update/response.json';

// Response
// The default export. More information at the top.
export type Response = t.Branded<
  {
    status?: number;
    message?: string;
    state?: string;
    errorCode?: string;
  } & {
    message: Defined;
    status: Defined;
  },
  ResponseBrand
>;
export type ResponseC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        status: t.NumberC;
        message: t.StringC;
        state: t.StringC;
        errorCode: t.StringC;
      }>,
      t.TypeC<{
        message: typeof Defined;
        status: typeof Defined;
      }>,
    ]
  >,
  ResponseBrand
>;
export const Response: ResponseC = t.brand(
  t.intersection([
    t.partial({
      status: t.number,
      message: t.string,
      state: t.string,
      errorCode: t.string,
    }),
    t.type({
      message: Defined,
      status: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      status?: number;
      message?: string;
      state?: string;
      errorCode?: string;
    } & {
      message: Defined;
      status: Defined;
    },
    ResponseBrand
  > => true,
  'Response',
);
export interface ResponseBrand {
  readonly Response: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(Response)).decodeSync(examplesResponse) // => examplesResponse */
export const examplesResponse: NonEmptyArray<Response> = ([
  { status: 200, message: 'Documents were processed.' },
  {
    status: 403,
    message: 'Verification state returned from TSP',
    state: 'DECLINED',
    errorCode: 'ERROR_TSP_CATEGORY_B_REQUIRED',
  },
] as unknown) as NonEmptyArray<Response>;

export default Response;

// Success
