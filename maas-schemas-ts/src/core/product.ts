/*

undefined
Product in core which encapsulates at least an id, name and a tspProductId

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Fare_ from './components/fare';
import * as Common_ from './components/common';

export interface NullBrand {
  readonly Null: unique symbol;
}
export type NullC = t.BrandC<t.UnknownC, NullBrand>;
export const Null: NullC = t.brand(
  t.unknown,
  (n): n is t.Branded<unknown, NullBrand> => n === null,
  'Null',
);
export type Null = t.TypeOf<typeof Null>;

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/core/product.json';

// Id
// The purpose of this remains a mystery
export type Id = t.Branded<string, IdBrand>;
export type IdC = t.BrandC<t.StringC, IdBrand>;
export const Id: IdC = t.brand(
  t.string,
  (x): x is t.Branded<string, IdBrand> =>
    (typeof x !== 'string' || x.length >= 1) &&
    (typeof x !== 'string' || x.length <= 255),
  'Id',
);
export interface IdBrand {
  readonly Id: unique symbol;
}

// PreAuthBuffer
// The purpose of this remains a mystery
export type PreAuthBuffer = t.Branded<
  | {
      percentageExtra?: number;
      minimumExtra?: Fare_.Fare;
    }
  | Null,
  PreAuthBufferBrand
>;
export type PreAuthBufferC = t.BrandC<
  t.UnionC<
    [
      t.PartialC<{
        percentageExtra: t.NumberC;
        minimumExtra: typeof Fare_.Fare;
      }>,
      typeof Null,
    ]
  >,
  PreAuthBufferBrand
>;
export const PreAuthBuffer: PreAuthBufferC = t.brand(
  t.union([
    t.partial({
      percentageExtra: t.number,
      minimumExtra: Fare_.Fare,
    }),
    Null,
  ]),
  (
    x,
  ): x is t.Branded<
    | {
        percentageExtra?: number;
        minimumExtra?: Fare_.Fare;
      }
    | Null,
    PreAuthBufferBrand
  > => true,
  'PreAuthBuffer',
);
export interface PreAuthBufferBrand {
  readonly PreAuthBuffer: unique symbol;
}

// Product
// The default export. More information at the top.
export type Product = t.Branded<
  {
    id?: Id;
    name?: string;
    description?: string;
    icon?: string;
    priority?: number;
    agencyId?: Common_.AgencyId;
    tspProductId?: string;
    allowFinishTrip?: boolean;
    preAuthBuffer?: PreAuthBuffer;
  } & {
    id: Defined;
    tspProductId: Defined;
    name: Defined;
  },
  ProductBrand
>;
export type ProductC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: typeof Id;
        name: t.StringC;
        description: t.StringC;
        icon: t.StringC;
        priority: t.NumberC;
        agencyId: typeof Common_.AgencyId;
        tspProductId: t.StringC;
        allowFinishTrip: t.BooleanC;
        preAuthBuffer: typeof PreAuthBuffer;
      }>,
      t.TypeC<{
        id: typeof Defined;
        tspProductId: typeof Defined;
        name: typeof Defined;
      }>,
    ]
  >,
  ProductBrand
>;
export const Product: ProductC = t.brand(
  t.intersection([
    t.partial({
      id: Id,
      name: t.string,
      description: t.string,
      icon: t.string,
      priority: t.number,
      agencyId: Common_.AgencyId,
      tspProductId: t.string,
      allowFinishTrip: t.boolean,
      preAuthBuffer: PreAuthBuffer,
    }),
    t.type({
      id: Defined,
      tspProductId: Defined,
      name: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: Id;
      name?: string;
      description?: string;
      icon?: string;
      priority?: number;
      agencyId?: Common_.AgencyId;
      tspProductId?: string;
      allowFinishTrip?: boolean;
      preAuthBuffer?: PreAuthBuffer;
    } & {
      id: Defined;
      tspProductId: Defined;
      name: Defined;
    },
    ProductBrand
  > => true,
  'Product',
);
export interface ProductBrand {
  readonly Product: unique symbol;
}

export default Product;

// Success
