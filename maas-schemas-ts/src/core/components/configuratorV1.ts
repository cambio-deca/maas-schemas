/*

undefined
Configurator schema to customize a booking option

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as ConfiguratorCommon_ from './configuratorCommon';
import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import { nonEmptyArray } from 'io-ts-types/lib/nonEmptyArray';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/core/components/configuratorV1.json';

// ConfiguratorV1
// The default export. More information at the top.
export type ConfiguratorV1 = t.Branded<
  {
    seatDirection?: ConfiguratorCommon_.Config;
    seatPosition?: ConfiguratorCommon_.Config;
    seatType?: ConfiguratorCommon_.Config;
    seatFeatures?: ConfiguratorCommon_.Config;
    stations?: ConfiguratorCommon_.Config;
    outboundSingle?: ConfiguratorCommon_.Config;
    inboundSingle?: ConfiguratorCommon_.Config;
    openReturn?: ConfiguratorCommon_.Config;
    freeReturn?: ConfiguratorCommon_.Config;
    ticketCollectionPoint?: ConfiguratorCommon_.Text;
  } & (
    | {
        seatDirection: Defined;
      }
    | {
        seatPosition: Defined;
      }
    | {
        seatType: Defined;
      }
    | {
        seatFeatures: Defined;
      }
    | {
        stations: Defined;
      }
    | {
        outboundSingle: Defined;
      }
    | {
        inboundSingle: Defined;
      }
    | {
        openReturn: Defined;
      }
    | {
        freeReturn: Defined;
      }
    | {
        ticketCollectionPoint: Defined;
      }
  ),
  ConfiguratorV1Brand
>;
export type ConfiguratorV1C = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        seatDirection: typeof ConfiguratorCommon_.Config;
        seatPosition: typeof ConfiguratorCommon_.Config;
        seatType: typeof ConfiguratorCommon_.Config;
        seatFeatures: typeof ConfiguratorCommon_.Config;
        stations: typeof ConfiguratorCommon_.Config;
        outboundSingle: typeof ConfiguratorCommon_.Config;
        inboundSingle: typeof ConfiguratorCommon_.Config;
        openReturn: typeof ConfiguratorCommon_.Config;
        freeReturn: typeof ConfiguratorCommon_.Config;
        ticketCollectionPoint: typeof ConfiguratorCommon_.Text;
      }>,
      t.UnionC<
        [
          t.TypeC<{
            seatDirection: typeof Defined;
          }>,
          t.TypeC<{
            seatPosition: typeof Defined;
          }>,
          t.TypeC<{
            seatType: typeof Defined;
          }>,
          t.TypeC<{
            seatFeatures: typeof Defined;
          }>,
          t.TypeC<{
            stations: typeof Defined;
          }>,
          t.TypeC<{
            outboundSingle: typeof Defined;
          }>,
          t.TypeC<{
            inboundSingle: typeof Defined;
          }>,
          t.TypeC<{
            openReturn: typeof Defined;
          }>,
          t.TypeC<{
            freeReturn: typeof Defined;
          }>,
          t.TypeC<{
            ticketCollectionPoint: typeof Defined;
          }>,
        ]
      >,
    ]
  >,
  ConfiguratorV1Brand
>;
export const ConfiguratorV1: ConfiguratorV1C = t.brand(
  t.intersection([
    t.partial({
      seatDirection: ConfiguratorCommon_.Config,
      seatPosition: ConfiguratorCommon_.Config,
      seatType: ConfiguratorCommon_.Config,
      seatFeatures: ConfiguratorCommon_.Config,
      stations: ConfiguratorCommon_.Config,
      outboundSingle: ConfiguratorCommon_.Config,
      inboundSingle: ConfiguratorCommon_.Config,
      openReturn: ConfiguratorCommon_.Config,
      freeReturn: ConfiguratorCommon_.Config,
      ticketCollectionPoint: ConfiguratorCommon_.Text,
    }),
    t.union([
      t.type({
        seatDirection: Defined,
      }),
      t.type({
        seatPosition: Defined,
      }),
      t.type({
        seatType: Defined,
      }),
      t.type({
        seatFeatures: Defined,
      }),
      t.type({
        stations: Defined,
      }),
      t.type({
        outboundSingle: Defined,
      }),
      t.type({
        inboundSingle: Defined,
      }),
      t.type({
        openReturn: Defined,
      }),
      t.type({
        freeReturn: Defined,
      }),
      t.type({
        ticketCollectionPoint: Defined,
      }),
    ]),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      seatDirection?: ConfiguratorCommon_.Config;
      seatPosition?: ConfiguratorCommon_.Config;
      seatType?: ConfiguratorCommon_.Config;
      seatFeatures?: ConfiguratorCommon_.Config;
      stations?: ConfiguratorCommon_.Config;
      outboundSingle?: ConfiguratorCommon_.Config;
      inboundSingle?: ConfiguratorCommon_.Config;
      openReturn?: ConfiguratorCommon_.Config;
      freeReturn?: ConfiguratorCommon_.Config;
      ticketCollectionPoint?: ConfiguratorCommon_.Text;
    } & (
      | {
          seatDirection: Defined;
        }
      | {
          seatPosition: Defined;
        }
      | {
          seatType: Defined;
        }
      | {
          seatFeatures: Defined;
        }
      | {
          stations: Defined;
        }
      | {
          outboundSingle: Defined;
        }
      | {
          inboundSingle: Defined;
        }
      | {
          openReturn: Defined;
        }
      | {
          freeReturn: Defined;
        }
      | {
          ticketCollectionPoint: Defined;
        }
    ),
    ConfiguratorV1Brand
  > => true,
  'ConfiguratorV1',
);
export interface ConfiguratorV1Brand {
  readonly ConfiguratorV1: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(ConfiguratorV1)).decodeSync(examplesConfiguratorV1) // => examplesConfiguratorV1 */
export const examplesConfiguratorV1: NonEmptyArray<ConfiguratorV1> = ([
  {
    outboundSingle: {
      type: 'oneOf',
      name: 'Outbound Single',
      description: 'Are you posh or not?',
      choices: [
        {
          id: 'first-class',
          name: '1st Class',
          description: 'Yes, posh',
          fares: [{ amount: 100, currency: 'EUR' }],
          default: false,
        },
        {
          id: 'second-class',
          name: '2nd Class',
          description: 'Not posh',
          fares: [{ amount: 30, currency: 'EUR' }],
          default: true,
        },
      ],
    },
  },
] as unknown) as NonEmptyArray<ConfiguratorV1>;

export default ConfiguratorV1;

// Success
