/*

undefined
A spaceDemand describes nr of passengers (adults, infatnts, etc) and bags (luggages).

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import { nonEmptyArray } from 'io-ts-types/lib/nonEmptyArray';

export const schemaId = 'https://schemas.maas.global/core/components/spaceDemand.json';

// SpaceDemandObject
// The purpose of this remains a mystery
export type SpaceDemandObject = t.Branded<
  {
    adults?: number;
    children?: number;
    infants?: number;
    bags?: number;
  } & Record<string, unknown>,
  SpaceDemandObjectBrand
>;
export type SpaceDemandObjectC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        adults: t.NumberC;
        children: t.NumberC;
        infants: t.NumberC;
        bags: t.NumberC;
      }>,
      t.RecordC<t.StringC, t.UnknownC>,
    ]
  >,
  SpaceDemandObjectBrand
>;
export const SpaceDemandObject: SpaceDemandObjectC = t.brand(
  t.intersection([
    t.partial({
      adults: t.number,
      children: t.number,
      infants: t.number,
      bags: t.number,
    }),
    t.record(t.string, t.unknown),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      adults?: number;
      children?: number;
      infants?: number;
      bags?: number;
    } & Record<string, unknown>,
    SpaceDemandObjectBrand
  > => true,
  'SpaceDemandObject',
);
export interface SpaceDemandObjectBrand {
  readonly SpaceDemandObject: unique symbol;
}

// SpaceDemandString
// The purpose of this remains a mystery
export type SpaceDemandString = t.Branded<string, SpaceDemandStringBrand>;
export type SpaceDemandStringC = t.BrandC<t.StringC, SpaceDemandStringBrand>;
export const SpaceDemandString: SpaceDemandStringC = t.brand(
  t.string,
  (x): x is t.Branded<string, SpaceDemandStringBrand> =>
    typeof x !== 'string' ||
    x.match(
      RegExp(
        '(adults:[1-9][0-9]*)|(children:[1-9][0-9]*)|(infants:[1-9][0-9]*)|(bags:[1-9][0-9]*)',
        'gui',
      ),
    ) !== null,
  'SpaceDemandString',
);
export interface SpaceDemandStringBrand {
  readonly SpaceDemandString: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(SpaceDemandString)).decodeSync(examplesSpaceDemandString) // => examplesSpaceDemandString */
export const examplesSpaceDemandString: NonEmptyArray<SpaceDemandString> = ([
  'adults:1|bags:2',
] as unknown) as NonEmptyArray<SpaceDemandString>;

// SpaceDemand
// The default export. More information at the top.
export type SpaceDemand = t.Branded<unknown, SpaceDemandBrand>;
export type SpaceDemandC = t.BrandC<t.UnknownC, SpaceDemandBrand>;
export const SpaceDemand: SpaceDemandC = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, SpaceDemandBrand> => true,
  'SpaceDemand',
);
export interface SpaceDemandBrand {
  readonly SpaceDemand: unique symbol;
}

export default SpaceDemand;

// Success
