/*

undefined
MaaS customer virtual cards get token reference request

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as ApiCommon_ from '../../../../core/components/api-common';
import * as Units_ from '../../../../core/components/units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/customers/virtual-cards/add-token-reference/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  {
    identityId?: Units_.IdentityId;
    customerId?: Units_.IdentityId;
    virtualCardId?: number;
    payload?: {
      tokenReferenceId?: string;
      added?: Units_.Time;
      deviceType?: string & ('SMARTPHONE' | 'WEARABLE');
      extendedData?: string;
    } & (
      | {
          tokenReferenceId: Defined;
          deviceType: Defined;
        }
      | {
          extendedData: Defined;
          deviceType: Defined;
        }
    );
    headers?: ApiCommon_.Headers;
  } & {
    identityId: Defined;
    customerId: Defined;
    virtualCardId: Defined;
    payload: Defined;
    headers: Defined;
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        identityId: typeof Units_.IdentityId;
        customerId: typeof Units_.IdentityId;
        virtualCardId: t.NumberC;
        payload: t.IntersectionC<
          [
            t.PartialC<{
              tokenReferenceId: t.StringC;
              added: typeof Units_.Time;
              deviceType: t.IntersectionC<
                [t.StringC, t.UnionC<[t.LiteralC<'SMARTPHONE'>, t.LiteralC<'WEARABLE'>]>]
              >;
              extendedData: t.StringC;
            }>,
            t.UnionC<
              [
                t.TypeC<{
                  tokenReferenceId: typeof Defined;
                  deviceType: typeof Defined;
                }>,
                t.TypeC<{
                  extendedData: typeof Defined;
                  deviceType: typeof Defined;
                }>,
              ]
            >,
          ]
        >;
        headers: typeof ApiCommon_.Headers;
      }>,
      t.TypeC<{
        identityId: typeof Defined;
        customerId: typeof Defined;
        virtualCardId: typeof Defined;
        payload: typeof Defined;
        headers: typeof Defined;
      }>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.partial({
      identityId: Units_.IdentityId,
      customerId: Units_.IdentityId,
      virtualCardId: t.number,
      payload: t.intersection([
        t.partial({
          tokenReferenceId: t.string,
          added: Units_.Time,
          deviceType: t.intersection([
            t.string,
            t.union([t.literal('SMARTPHONE'), t.literal('WEARABLE')]),
          ]),
          extendedData: t.string,
        }),
        t.union([
          t.type({
            tokenReferenceId: Defined,
            deviceType: Defined,
          }),
          t.type({
            extendedData: Defined,
            deviceType: Defined,
          }),
        ]),
      ]),
      headers: ApiCommon_.Headers,
    }),
    t.type({
      identityId: Defined,
      customerId: Defined,
      virtualCardId: Defined,
      payload: Defined,
      headers: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_.IdentityId;
      customerId?: Units_.IdentityId;
      virtualCardId?: number;
      payload?: {
        tokenReferenceId?: string;
        added?: Units_.Time;
        deviceType?: string & ('SMARTPHONE' | 'WEARABLE');
        extendedData?: string;
      } & (
        | {
            tokenReferenceId: Defined;
            deviceType: Defined;
          }
        | {
            extendedData: Defined;
            deviceType: Defined;
          }
      );
      headers?: ApiCommon_.Headers;
    } & {
      identityId: Defined;
      customerId: Defined;
      virtualCardId: Defined;
      payload: Defined;
      headers: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export type RequestBrand = {
  readonly Request: unique symbol;
};

export default Request;

// Success
