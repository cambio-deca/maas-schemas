/*

undefined
Request schema for webhook verification event (started and submitted)

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Units_ from '../../../../../core/components/units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/customers/verification/webhooks/event/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  {
    payload?: {
      id?: Units_.Uuid;
      attemptId?: Units_.Uuid;
      feature?: string;
      code?: number & (7001 | 7002);
      action?: string & ('started' | 'submitted');
    } & {
      id: Defined;
      attemptId: Defined;
      feature: Defined;
      code: Defined;
      action: Defined;
    };
    headers?: ({
      'x-signature'?: string;
      'x-auth-client'?: Units_.Uuid;
    } & Record<string, unknown>) & {
      'x-signature': Defined;
      'x-auth-client': Defined;
    };
    technicalData?: {
      ip?: string;
    } & Record<string, unknown>;
  } & {
    headers: Defined;
    payload: Defined;
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        payload: t.IntersectionC<
          [
            t.PartialC<{
              id: typeof Units_.Uuid;
              attemptId: typeof Units_.Uuid;
              feature: t.StringC;
              code: t.IntersectionC<
                [t.NumberC, t.UnionC<[t.LiteralC<7001>, t.LiteralC<7002>]>]
              >;
              action: t.IntersectionC<
                [t.StringC, t.UnionC<[t.LiteralC<'started'>, t.LiteralC<'submitted'>]>]
              >;
            }>,
            t.TypeC<{
              id: typeof Defined;
              attemptId: typeof Defined;
              feature: typeof Defined;
              code: typeof Defined;
              action: typeof Defined;
            }>,
          ]
        >;
        headers: t.IntersectionC<
          [
            t.IntersectionC<
              [
                t.PartialC<{
                  'x-signature': t.StringC;
                  'x-auth-client': typeof Units_.Uuid;
                }>,
                t.RecordC<t.StringC, t.UnknownC>,
              ]
            >,
            t.TypeC<{
              'x-signature': typeof Defined;
              'x-auth-client': typeof Defined;
            }>,
          ]
        >;
        technicalData: t.IntersectionC<
          [
            t.PartialC<{
              ip: t.StringC;
            }>,
            t.RecordC<t.StringC, t.UnknownC>,
          ]
        >;
      }>,
      t.TypeC<{
        headers: typeof Defined;
        payload: typeof Defined;
      }>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.partial({
      payload: t.intersection([
        t.partial({
          id: Units_.Uuid,
          attemptId: Units_.Uuid,
          feature: t.string,
          code: t.intersection([t.number, t.union([t.literal(7001), t.literal(7002)])]),
          action: t.intersection([
            t.string,
            t.union([t.literal('started'), t.literal('submitted')]),
          ]),
        }),
        t.type({
          id: Defined,
          attemptId: Defined,
          feature: Defined,
          code: Defined,
          action: Defined,
        }),
      ]),
      headers: t.intersection([
        t.intersection([
          t.partial({
            'x-signature': t.string,
            'x-auth-client': Units_.Uuid,
          }),
          t.record(t.string, t.unknown),
        ]),
        t.type({
          'x-signature': Defined,
          'x-auth-client': Defined,
        }),
      ]),
      technicalData: t.intersection([
        t.partial({
          ip: t.string,
        }),
        t.record(t.string, t.unknown),
      ]),
    }),
    t.type({
      headers: Defined,
      payload: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      payload?: {
        id?: Units_.Uuid;
        attemptId?: Units_.Uuid;
        feature?: string;
        code?: number & (7001 | 7002);
        action?: string & ('started' | 'submitted');
      } & {
        id: Defined;
        attemptId: Defined;
        feature: Defined;
        code: Defined;
        action: Defined;
      };
      headers?: ({
        'x-signature'?: string;
        'x-auth-client'?: Units_.Uuid;
      } & Record<string, unknown>) & {
        'x-signature': Defined;
        'x-auth-client': Defined;
      };
      technicalData?: {
        ip?: string;
      } & Record<string, unknown>;
    } & {
      headers: Defined;
      payload: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export type RequestBrand = {
  readonly Request: unique symbol;
};

export default Request;

// Success
