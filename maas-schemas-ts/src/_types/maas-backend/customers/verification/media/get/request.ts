/*

undefined
MaaS customer verification media get

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../../../../core/components/units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/customers/verification/media/get/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  {
    customerId?: Units_.IdentityId;
    identityId?: Units_.IdentityId;
    payload?: {
      side?: string;
      type?: string;
    } & {
      type: Defined;
      side: Defined;
    };
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.PartialC<{
    customerId: typeof Units_.IdentityId;
    identityId: typeof Units_.IdentityId;
    payload: t.IntersectionC<
      [
        t.PartialC<{
          side: t.StringC;
          type: t.StringC;
        }>,
        t.TypeC<{
          type: typeof Defined;
          side: typeof Defined;
        }>,
      ]
    >;
  }>,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.partial({
    customerId: Units_.IdentityId,
    identityId: Units_.IdentityId,
    payload: t.intersection([
      t.partial({
        side: t.string,
        type: t.string,
      }),
      t.type({
        type: Defined,
        side: Defined,
      }),
    ]),
  }),
  (
    x,
  ): x is t.Branded<
    {
      customerId?: Units_.IdentityId;
      identityId?: Units_.IdentityId;
      payload?: {
        side?: string;
        type?: string;
      } & {
        type: Defined;
        side: Defined;
      };
    },
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

export default Request;

// Success
