/*

undefined
Request schema for tsp-auth set

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../../core/components/units';
import * as Common_ from '../../../core/components/common';
import * as ApiCommon_ from '../../../core/components/api-common';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/tsp-auth/set/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  {
    identityId?: Units_.IdentityId;
    customerId?: Units_.IdentityId;
    agencyId?: Common_.AgencyId;
    headers?: ApiCommon_.Headers;
    payload?: {
      validTo?: Units_.Time;
      authData?: Record<string, unknown> & Record<string, unknown>;
    } & Record<string, unknown>;
  } & {
    identityId: Defined;
    customerId: Defined;
    agencyId: Defined;
    payload: Defined;
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        identityId: typeof Units_.IdentityId;
        customerId: typeof Units_.IdentityId;
        agencyId: typeof Common_.AgencyId;
        headers: typeof ApiCommon_.Headers;
        payload: t.IntersectionC<
          [
            t.PartialC<{
              validTo: typeof Units_.Time;
              authData: t.IntersectionC<
                [t.UnknownRecordC, t.RecordC<t.StringC, t.UnknownC>]
              >;
            }>,
            t.RecordC<t.StringC, t.UnknownC>,
          ]
        >;
      }>,
      t.TypeC<{
        identityId: typeof Defined;
        customerId: typeof Defined;
        agencyId: typeof Defined;
        payload: typeof Defined;
      }>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.partial({
      identityId: Units_.IdentityId,
      customerId: Units_.IdentityId,
      agencyId: Common_.AgencyId,
      headers: ApiCommon_.Headers,
      payload: t.intersection([
        t.partial({
          validTo: Units_.Time,
          authData: t.intersection([t.UnknownRecord, t.record(t.string, t.unknown)]),
        }),
        t.record(t.string, t.unknown),
      ]),
    }),
    t.type({
      identityId: Defined,
      customerId: Defined,
      agencyId: Defined,
      payload: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_.IdentityId;
      customerId?: Units_.IdentityId;
      agencyId?: Common_.AgencyId;
      headers?: ApiCommon_.Headers;
      payload?: {
        validTo?: Units_.Time;
        authData?: Record<string, unknown> & Record<string, unknown>;
      } & Record<string, unknown>;
    } & {
      identityId: Defined;
      customerId: Defined;
      agencyId: Defined;
      payload: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

export default Request;

// Success
