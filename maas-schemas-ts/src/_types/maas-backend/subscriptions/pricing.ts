/*

undefined
MaaS pricing schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Subscription_ from './subscription';
import * as Cost_ from '../../core/components/cost';
import * as Units_ from '../../core/components/units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/subscriptions/pricing.json';

// LineItem
// An item that is priced with it summaries
export type LineItem = t.Branded<
  {
    id?: Subscription_.SubscriptionItemId;
    type?: string;
    description?: string;
    quantity?: number;
    unitPrice?: Cost_.Cost;
  } & {
    id: Defined;
    type: Defined;
    description: Defined;
    quantity: Defined;
    unitPrice: Defined;
  },
  LineItemBrand
>;
export type LineItemC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: typeof Subscription_.SubscriptionItemId;
        type: t.StringC;
        description: t.StringC;
        quantity: t.NumberC;
        unitPrice: typeof Cost_.Cost;
      }>,
      t.TypeC<{
        id: typeof Defined;
        type: typeof Defined;
        description: typeof Defined;
        quantity: typeof Defined;
        unitPrice: typeof Defined;
      }>,
    ]
  >,
  LineItemBrand
>;
export const LineItem: LineItemC = t.brand(
  t.intersection([
    t.partial({
      id: Subscription_.SubscriptionItemId,
      type: t.string,
      description: t.string,
      quantity: t.number,
      unitPrice: Cost_.Cost,
    }),
    t.type({
      id: Defined,
      type: Defined,
      description: Defined,
      quantity: Defined,
      unitPrice: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: Subscription_.SubscriptionItemId;
      type?: string;
      description?: string;
      quantity?: number;
      unitPrice?: Cost_.Cost;
    } & {
      id: Defined;
      type: Defined;
      description: Defined;
      quantity: Defined;
      unitPrice: Defined;
    },
    LineItemBrand
  > => true,
  'LineItem',
);
export interface LineItemBrand {
  readonly LineItem: unique symbol;
}

// Discount
// A discount from coupon or such
export type Discount = t.Branded<
  {
    description?: string;
    discount?: Cost_.Cost;
  } & {
    description: Defined;
    discount: Defined;
  },
  DiscountBrand
>;
export type DiscountC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        description: t.StringC;
        discount: typeof Cost_.Cost;
      }>,
      t.TypeC<{
        description: typeof Defined;
        discount: typeof Defined;
      }>,
    ]
  >,
  DiscountBrand
>;
export const Discount: DiscountC = t.brand(
  t.intersection([
    t.partial({
      description: t.string,
      discount: Cost_.Cost,
    }),
    t.type({
      description: Defined,
      discount: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      description?: string;
      discount?: Cost_.Cost;
    } & {
      description: Defined;
      discount: Defined;
    },
    DiscountBrand
  > => true,
  'Discount',
);
export interface DiscountBrand {
  readonly Discount: unique symbol;
}

// Terms
// Terms related to this subscription
export type Terms = t.Branded<
  ({
    validity?: ({
      startTime?: Units_.Time;
      endTime?: Units_.Time;
    } & Record<string, unknown>) & {
      startTime: Defined;
      endTime: Defined;
    };
  } & Record<string, unknown>) & {
    validity: Defined;
  },
  TermsBrand
>;
export type TermsC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            validity: t.IntersectionC<
              [
                t.IntersectionC<
                  [
                    t.PartialC<{
                      startTime: typeof Units_.Time;
                      endTime: typeof Units_.Time;
                    }>,
                    t.RecordC<t.StringC, t.UnknownC>,
                  ]
                >,
                t.TypeC<{
                  startTime: typeof Defined;
                  endTime: typeof Defined;
                }>,
              ]
            >;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        validity: typeof Defined;
      }>,
    ]
  >,
  TermsBrand
>;
export const Terms: TermsC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        validity: t.intersection([
          t.intersection([
            t.partial({
              startTime: Units_.Time,
              endTime: Units_.Time,
            }),
            t.record(t.string, t.unknown),
          ]),
          t.type({
            startTime: Defined,
            endTime: Defined,
          }),
        ]),
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      validity: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      validity?: ({
        startTime?: Units_.Time;
        endTime?: Units_.Time;
      } & Record<string, unknown>) & {
        startTime: Defined;
        endTime: Defined;
      };
    } & Record<string, unknown>) & {
      validity: Defined;
    },
    TermsBrand
  > => true,
  'Terms',
);
export interface TermsBrand {
  readonly Terms: unique symbol;
}

// Pricing
// The default export. More information at the top.
export type Pricing = t.Branded<
  {
    lineItems?: Array<LineItem>;
    discounts?: Array<Discount>;
    total?: Cost_.Cost;
    terms?: Terms;
  } & {
    lineItems: Defined;
    total: Defined;
  },
  PricingBrand
>;
export type PricingC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        lineItems: t.ArrayC<typeof LineItem>;
        discounts: t.ArrayC<typeof Discount>;
        total: typeof Cost_.Cost;
        terms: typeof Terms;
      }>,
      t.TypeC<{
        lineItems: typeof Defined;
        total: typeof Defined;
      }>,
    ]
  >,
  PricingBrand
>;
export const Pricing: PricingC = t.brand(
  t.intersection([
    t.partial({
      lineItems: t.array(LineItem),
      discounts: t.array(Discount),
      total: Cost_.Cost,
      terms: Terms,
    }),
    t.type({
      lineItems: Defined,
      total: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      lineItems?: Array<LineItem>;
      discounts?: Array<Discount>;
      total?: Cost_.Cost;
      terms?: Terms;
    } & {
      lineItems: Defined;
      total: Defined;
    },
    PricingBrand
  > => true,
  'Pricing',
);
export interface PricingBrand {
  readonly Pricing: unique symbol;
}

export default Pricing;

// Success
