/*

undefined
Response schema for routes providers, subset of routes-query response schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Place_ from '../../../core/components/place';
import * as Itinerary_ from '../../../core/itinerary';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/provider/routes/response.json';

// Itineraries
// The purpose of this remains a mystery
export type Itineraries = t.Branded<Array<Itinerary_.Itinerary>, ItinerariesBrand>;
export type ItinerariesC = t.BrandC<
  t.ArrayC<typeof Itinerary_.Itinerary>,
  ItinerariesBrand
>;
export const Itineraries: ItinerariesC = t.brand(
  t.array(Itinerary_.Itinerary),
  (x): x is t.Branded<Array<Itinerary_.Itinerary>, ItinerariesBrand> => true,
  'Itineraries',
);
export type ItinerariesBrand = {
  readonly Itineraries: unique symbol;
};

// Plan1
// The purpose of this remains a mystery
export type Plan1 = t.Branded<
  ({
    from?: Place_.Place;
    outwards?: Itineraries;
    returns?: Itineraries;
  } & Record<string, unknown>) & {
    from: Defined;
    outwards: Defined;
    returns: Defined;
  },
  Plan1Brand
>;
export type Plan1C = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            from: typeof Place_.Place;
            outwards: typeof Itineraries;
            returns: typeof Itineraries;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        from: typeof Defined;
        outwards: typeof Defined;
        returns: typeof Defined;
      }>,
    ]
  >,
  Plan1Brand
>;
export const Plan1: Plan1C = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        from: Place_.Place,
        outwards: Itineraries,
        returns: Itineraries,
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      from: Defined,
      outwards: Defined,
      returns: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      from?: Place_.Place;
      outwards?: Itineraries;
      returns?: Itineraries;
    } & Record<string, unknown>) & {
      from: Defined;
      outwards: Defined;
      returns: Defined;
    },
    Plan1Brand
  > => true,
  'Plan1',
);
export type Plan1Brand = {
  readonly Plan1: unique symbol;
};

// Plan2
// The purpose of this remains a mystery
export type Plan2 = t.Branded<
  ({
    from?: Place_.Place;
    itineraries?: Itineraries;
  } & Record<string, unknown>) & {
    from: Defined;
    itineraries: Defined;
  },
  Plan2Brand
>;
export type Plan2C = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            from: typeof Place_.Place;
            itineraries: typeof Itineraries;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        from: typeof Defined;
        itineraries: typeof Defined;
      }>,
    ]
  >,
  Plan2Brand
>;
export const Plan2: Plan2C = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        from: Place_.Place,
        itineraries: Itineraries,
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      from: Defined,
      itineraries: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      from?: Place_.Place;
      itineraries?: Itineraries;
    } & Record<string, unknown>) & {
      from: Defined;
      itineraries: Defined;
    },
    Plan2Brand
  > => true,
  'Plan2',
);
export type Plan2Brand = {
  readonly Plan2: unique symbol;
};

// Response
// The default export. More information at the top.
export type Response = t.Branded<
  {
    plan?: Plan1 | Plan2;
  } & Record<string, unknown>,
  ResponseBrand
>;
export type ResponseC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        plan: t.UnionC<[typeof Plan1, typeof Plan2]>;
      }>,
      t.RecordC<t.StringC, t.UnknownC>,
    ]
  >,
  ResponseBrand
>;
export const Response: ResponseC = t.brand(
  t.intersection([
    t.partial({
      plan: t.union([Plan1, Plan2]),
    }),
    t.record(t.string, t.unknown),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      plan?: Plan1 | Plan2;
    } & Record<string, unknown>,
    ResponseBrand
  > => true,
  'Response',
);
export type ResponseBrand = {
  readonly Response: unique symbol;
};

export default Response;

// Success
