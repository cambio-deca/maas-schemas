/*

undefined
Request schema for routes providers

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../../core/components/units';
import * as UnitsGeo_ from '../../../core/components/units-geo';
import * as Address_ from '../../../core/components/address';
import * as Station_ from '../../../core/components/station';
import * as TravelMode_ from '../../../core/components/travel-mode';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/provider/routes/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  ({
    identityId?: Units_.IdentityId;
    from?: UnitsGeo_.ShortLocation;
    fromName?: Address_.PlaceName;
    fromAddress?: Address_.ComponentAddress;
    fromStationId?: Station_.Id;
    to?: UnitsGeo_.ShortLocation;
    toName?: Address_.PlaceName;
    toAddress?: Address_.ComponentAddress;
    toStationId?: Station_.Id;
    leaveAt?: Units_.Time;
    arriveBy?: Units_.Time;
    modes?: TravelMode_.TravelMode;
  } & Record<
    string,
    | Units_.IdentityId
    | UnitsGeo_.ShortLocation
    | Address_.PlaceName
    | Address_.ComponentAddress
    | Station_.Id
    | UnitsGeo_.ShortLocation
    | Address_.PlaceName
    | Address_.ComponentAddress
    | Station_.Id
    | Units_.Time
    | Units_.Time
    | TravelMode_.TravelMode
    | (string | number | boolean)
  >) & {
    from: Defined;
    to: Defined;
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            identityId: typeof Units_.IdentityId;
            from: typeof UnitsGeo_.ShortLocation;
            fromName: typeof Address_.PlaceName;
            fromAddress: typeof Address_.ComponentAddress;
            fromStationId: typeof Station_.Id;
            to: typeof UnitsGeo_.ShortLocation;
            toName: typeof Address_.PlaceName;
            toAddress: typeof Address_.ComponentAddress;
            toStationId: typeof Station_.Id;
            leaveAt: typeof Units_.Time;
            arriveBy: typeof Units_.Time;
            modes: typeof TravelMode_.TravelMode;
          }>,
          t.RecordC<
            t.StringC,
            t.UnionC<
              [
                typeof Units_.IdentityId,
                typeof UnitsGeo_.ShortLocation,
                typeof Address_.PlaceName,
                typeof Address_.ComponentAddress,
                typeof Station_.Id,
                typeof UnitsGeo_.ShortLocation,
                typeof Address_.PlaceName,
                typeof Address_.ComponentAddress,
                typeof Station_.Id,
                typeof Units_.Time,
                typeof Units_.Time,
                typeof TravelMode_.TravelMode,
                t.UnionC<[t.StringC, t.NumberC, t.BooleanC]>,
              ]
            >
          >,
        ]
      >,
      t.TypeC<{
        from: typeof Defined;
        to: typeof Defined;
      }>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        identityId: Units_.IdentityId,
        from: UnitsGeo_.ShortLocation,
        fromName: Address_.PlaceName,
        fromAddress: Address_.ComponentAddress,
        fromStationId: Station_.Id,
        to: UnitsGeo_.ShortLocation,
        toName: Address_.PlaceName,
        toAddress: Address_.ComponentAddress,
        toStationId: Station_.Id,
        leaveAt: Units_.Time,
        arriveBy: Units_.Time,
        modes: TravelMode_.TravelMode,
      }),
      t.record(
        t.string,
        t.union([
          Units_.IdentityId,
          UnitsGeo_.ShortLocation,
          Address_.PlaceName,
          Address_.ComponentAddress,
          Station_.Id,
          UnitsGeo_.ShortLocation,
          Address_.PlaceName,
          Address_.ComponentAddress,
          Station_.Id,
          Units_.Time,
          Units_.Time,
          TravelMode_.TravelMode,
          t.union([t.string, t.number, t.boolean]),
        ]),
      ),
    ]),
    t.type({
      from: Defined,
      to: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      identityId?: Units_.IdentityId;
      from?: UnitsGeo_.ShortLocation;
      fromName?: Address_.PlaceName;
      fromAddress?: Address_.ComponentAddress;
      fromStationId?: Station_.Id;
      to?: UnitsGeo_.ShortLocation;
      toName?: Address_.PlaceName;
      toAddress?: Address_.ComponentAddress;
      toStationId?: Station_.Id;
      leaveAt?: Units_.Time;
      arriveBy?: Units_.Time;
      modes?: TravelMode_.TravelMode;
    } & Record<
      string,
      | Units_.IdentityId
      | UnitsGeo_.ShortLocation
      | Address_.PlaceName
      | Address_.ComponentAddress
      | Station_.Id
      | UnitsGeo_.ShortLocation
      | Address_.PlaceName
      | Address_.ComponentAddress
      | Station_.Id
      | Units_.Time
      | Units_.Time
      | TravelMode_.TravelMode
      | (string | number | boolean)
    >) & {
      from: Defined;
      to: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

export default Request;

// Success
