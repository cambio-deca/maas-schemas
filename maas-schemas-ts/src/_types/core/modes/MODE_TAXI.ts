/*

undefined
Schema for MODE_TAXI meta field

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Common_ from '../components/common';
import * as CostBreakDown_ from '../components/costBreakDown';
import * as Place_ from '../components/place';
import * as SpaceDemand_ from '../components/spaceDemand';
import * as Units_ from '../components/units';
import * as UnitsGeo_ from '../components/units-geo';

export const schemaId = 'https://schemas.maas.global/core/modes/MODE_TAXI.json';

// MODE_TAXI
// The default export. More information at the top.
export type MODE_TAXI = t.Branded<
  {
    vehicleId?: string;
    noShowReportedByDriver?: boolean;
    vehicleLocation?: UnitsGeo_.Location;
    vehicleType?: string;
    vehicleDescription?: string;
    driver?: {
      phone?: string;
      name?: string;
      image?: Units_.Url;
      rating?: number;
    } & Record<string, unknown>;
    pickupIdentificationCode?: string;
    dispatchOrderId?: string;
    eta?: Units_.Time;
    pickupAt?: Units_.Time;
    taxiCenter?: {
      image?: Units_.Url;
      name?: string;
      phone?: Common_.Phone;
      supportUrl?: Units_.Url;
    } & Record<string, unknown>;
    messageToDriver?: string;
    spaceDemand?: SpaceDemand_.SpaceDemandObject;
    pickupAddress?: Place_.Place;
    dropoffAddress?: Place_.Place;
    costBreakDown?: CostBreakDown_.CostBreakDownArray;
  },
  MODE_TAXIBrand
>;
export type MODE_TAXIC = t.BrandC<
  t.PartialC<{
    vehicleId: t.StringC;
    noShowReportedByDriver: t.BooleanC;
    vehicleLocation: typeof UnitsGeo_.Location;
    vehicleType: t.StringC;
    vehicleDescription: t.StringC;
    driver: t.IntersectionC<
      [
        t.PartialC<{
          phone: t.StringC;
          name: t.StringC;
          image: typeof Units_.Url;
          rating: t.NumberC;
        }>,
        t.RecordC<t.StringC, t.UnknownC>,
      ]
    >;
    pickupIdentificationCode: t.StringC;
    dispatchOrderId: t.StringC;
    eta: typeof Units_.Time;
    pickupAt: typeof Units_.Time;
    taxiCenter: t.IntersectionC<
      [
        t.PartialC<{
          image: typeof Units_.Url;
          name: t.StringC;
          phone: typeof Common_.Phone;
          supportUrl: typeof Units_.Url;
        }>,
        t.RecordC<t.StringC, t.UnknownC>,
      ]
    >;
    messageToDriver: t.StringC;
    spaceDemand: typeof SpaceDemand_.SpaceDemandObject;
    pickupAddress: typeof Place_.Place;
    dropoffAddress: typeof Place_.Place;
    costBreakDown: typeof CostBreakDown_.CostBreakDownArray;
  }>,
  MODE_TAXIBrand
>;
export const MODE_TAXI: MODE_TAXIC = t.brand(
  t.partial({
    vehicleId: t.string,
    noShowReportedByDriver: t.boolean,
    vehicleLocation: UnitsGeo_.Location,
    vehicleType: t.string,
    vehicleDescription: t.string,
    driver: t.intersection([
      t.partial({
        phone: t.string,
        name: t.string,
        image: Units_.Url,
        rating: t.number,
      }),
      t.record(t.string, t.unknown),
    ]),
    pickupIdentificationCode: t.string,
    dispatchOrderId: t.string,
    eta: Units_.Time,
    pickupAt: Units_.Time,
    taxiCenter: t.intersection([
      t.partial({
        image: Units_.Url,
        name: t.string,
        phone: Common_.Phone,
        supportUrl: Units_.Url,
      }),
      t.record(t.string, t.unknown),
    ]),
    messageToDriver: t.string,
    spaceDemand: SpaceDemand_.SpaceDemandObject,
    pickupAddress: Place_.Place,
    dropoffAddress: Place_.Place,
    costBreakDown: CostBreakDown_.CostBreakDownArray,
  }),
  (
    x,
  ): x is t.Branded<
    {
      vehicleId?: string;
      noShowReportedByDriver?: boolean;
      vehicleLocation?: UnitsGeo_.Location;
      vehicleType?: string;
      vehicleDescription?: string;
      driver?: {
        phone?: string;
        name?: string;
        image?: Units_.Url;
        rating?: number;
      } & Record<string, unknown>;
      pickupIdentificationCode?: string;
      dispatchOrderId?: string;
      eta?: Units_.Time;
      pickupAt?: Units_.Time;
      taxiCenter?: {
        image?: Units_.Url;
        name?: string;
        phone?: Common_.Phone;
        supportUrl?: Units_.Url;
      } & Record<string, unknown>;
      messageToDriver?: string;
      spaceDemand?: SpaceDemand_.SpaceDemandObject;
      pickupAddress?: Place_.Place;
      dropoffAddress?: Place_.Place;
      costBreakDown?: CostBreakDown_.CostBreakDownArray;
    },
    MODE_TAXIBrand
  > => true,
  'MODE_TAXI',
);
export type MODE_TAXIBrand = {
  readonly MODE_TAXI: unique symbol;
};

export default MODE_TAXI;

// Success
