/*

undefined
TSP/mode-specific additional information. The TSP adapter should set MODE_{mode} with defined data, otherwise 'meta' can be used freely.

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as MODE_BICYCLE_ from './modes/MODE_BICYCLE';
import * as MODE_BUS_ from './modes/MODE_BUS';
import * as MODE_BUSISH_ from './modes/MODE_BUSISH';
import * as MODE_CABLE_CAR_ from './modes/MODE_CABLE_CAR';
import * as MODE_CAR_ from './modes/MODE_CAR';
import * as MODE_FERRY_ from './modes/MODE_FERRY';
import * as MODE_FUNICULAR_ from './modes/MODE_FUNICULAR';
import * as MODE_GONDOLA_ from './modes/MODE_GONDOLA';
import * as MODE_RAIL_ from './modes/MODE_RAIL';
import * as MODE_SCOOTER_ from './modes/MODE_SCOOTER';
import * as MODE_SHARED_BICYCLE_ from './modes/MODE_SHARED_BICYCLE';
import * as MODE_SHARED_CAR_ from './modes/MODE_SHARED_CAR';
import * as MODE_SHARED_E_BICYCLE_ from './modes/MODE_SHARED_E_BICYCLE';
import * as MODE_SUBWAY_ from './modes/MODE_SUBWAY';
import * as MODE_TAXI_ from './modes/MODE_TAXI';
import * as MODE_TRAIN_ from './modes/MODE_TRAIN';
import * as MODE_TRAINISH_ from './modes/MODE_TRAINISH';
import * as MODE_TRAM_ from './modes/MODE_TRAM';
import * as MODE_TRANSIT_ from './modes/MODE_TRANSIT';
import * as MODE_WALK_ from './modes/MODE_WALK';

export const schemaId = 'https://schemas.maas.global/core/booking-meta.json';

// BookingMeta
// The default export. More information at the top.
export type BookingMeta = t.Branded<
  {
    MODE_WALK?: MODE_WALK_.MODE_WALK;
    MODE_BICYCLE?: MODE_BICYCLE_.MODE_BICYCLE;
    MODE_CAR?: MODE_CAR_.MODE_CAR;
    MODE_TRAM?: MODE_TRAM_.MODE_TRAM;
    MODE_SUBWAY?: MODE_SUBWAY_.MODE_SUBWAY;
    MODE_RAIL?: MODE_RAIL_.MODE_RAIL;
    MODE_BUS?: MODE_BUS_.MODE_BUS;
    MODE_FERRY?: MODE_FERRY_.MODE_FERRY;
    MODE_CABLE_CAR?: MODE_CABLE_CAR_.MODE_CABLE_CAR;
    MODE_GONDOLA?: MODE_GONDOLA_.MODE_GONDOLA;
    MODE_FUNICULAR?: MODE_FUNICULAR_.MODE_FUNICULAR;
    MODE_SHARED_BICYCLE?: MODE_SHARED_BICYCLE_.MODE_SHARED_BICYCLE;
    MODE_SHARED_E_BICYCLE?: MODE_SHARED_E_BICYCLE_.MODE_SHARED_E_BICYCLE;
    MODE_SHARED_CAR?: MODE_SHARED_CAR_.MODE_SHARED_CAR;
    MODE_TRANSIT?: MODE_TRANSIT_.MODE_TRANSIT;
    MODE_TRAIN?: MODE_TRAIN_.MODE_TRAIN;
    MODE_TRAINISH?: MODE_TRAINISH_.MODE_TRAINISH;
    MODE_BUSISH?: MODE_BUSISH_.MODE_BUSISH;
    MODE_TAXI?: MODE_TAXI_.MODE_TAXI;
    MODE_SCOOTER?: MODE_SCOOTER_.MODE_SCOOTER;
  } & Record<string, unknown>,
  BookingMetaBrand
>;
export type BookingMetaC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        MODE_WALK: typeof MODE_WALK_.MODE_WALK;
        MODE_BICYCLE: typeof MODE_BICYCLE_.MODE_BICYCLE;
        MODE_CAR: typeof MODE_CAR_.MODE_CAR;
        MODE_TRAM: typeof MODE_TRAM_.MODE_TRAM;
        MODE_SUBWAY: typeof MODE_SUBWAY_.MODE_SUBWAY;
        MODE_RAIL: typeof MODE_RAIL_.MODE_RAIL;
        MODE_BUS: typeof MODE_BUS_.MODE_BUS;
        MODE_FERRY: typeof MODE_FERRY_.MODE_FERRY;
        MODE_CABLE_CAR: typeof MODE_CABLE_CAR_.MODE_CABLE_CAR;
        MODE_GONDOLA: typeof MODE_GONDOLA_.MODE_GONDOLA;
        MODE_FUNICULAR: typeof MODE_FUNICULAR_.MODE_FUNICULAR;
        MODE_SHARED_BICYCLE: typeof MODE_SHARED_BICYCLE_.MODE_SHARED_BICYCLE;
        MODE_SHARED_E_BICYCLE: typeof MODE_SHARED_E_BICYCLE_.MODE_SHARED_E_BICYCLE;
        MODE_SHARED_CAR: typeof MODE_SHARED_CAR_.MODE_SHARED_CAR;
        MODE_TRANSIT: typeof MODE_TRANSIT_.MODE_TRANSIT;
        MODE_TRAIN: typeof MODE_TRAIN_.MODE_TRAIN;
        MODE_TRAINISH: typeof MODE_TRAINISH_.MODE_TRAINISH;
        MODE_BUSISH: typeof MODE_BUSISH_.MODE_BUSISH;
        MODE_TAXI: typeof MODE_TAXI_.MODE_TAXI;
        MODE_SCOOTER: typeof MODE_SCOOTER_.MODE_SCOOTER;
      }>,
      t.RecordC<t.StringC, t.UnknownC>,
    ]
  >,
  BookingMetaBrand
>;
export const BookingMeta: BookingMetaC = t.brand(
  t.intersection([
    t.partial({
      MODE_WALK: MODE_WALK_.MODE_WALK,
      MODE_BICYCLE: MODE_BICYCLE_.MODE_BICYCLE,
      MODE_CAR: MODE_CAR_.MODE_CAR,
      MODE_TRAM: MODE_TRAM_.MODE_TRAM,
      MODE_SUBWAY: MODE_SUBWAY_.MODE_SUBWAY,
      MODE_RAIL: MODE_RAIL_.MODE_RAIL,
      MODE_BUS: MODE_BUS_.MODE_BUS,
      MODE_FERRY: MODE_FERRY_.MODE_FERRY,
      MODE_CABLE_CAR: MODE_CABLE_CAR_.MODE_CABLE_CAR,
      MODE_GONDOLA: MODE_GONDOLA_.MODE_GONDOLA,
      MODE_FUNICULAR: MODE_FUNICULAR_.MODE_FUNICULAR,
      MODE_SHARED_BICYCLE: MODE_SHARED_BICYCLE_.MODE_SHARED_BICYCLE,
      MODE_SHARED_E_BICYCLE: MODE_SHARED_E_BICYCLE_.MODE_SHARED_E_BICYCLE,
      MODE_SHARED_CAR: MODE_SHARED_CAR_.MODE_SHARED_CAR,
      MODE_TRANSIT: MODE_TRANSIT_.MODE_TRANSIT,
      MODE_TRAIN: MODE_TRAIN_.MODE_TRAIN,
      MODE_TRAINISH: MODE_TRAINISH_.MODE_TRAINISH,
      MODE_BUSISH: MODE_BUSISH_.MODE_BUSISH,
      MODE_TAXI: MODE_TAXI_.MODE_TAXI,
      MODE_SCOOTER: MODE_SCOOTER_.MODE_SCOOTER,
    }),
    t.record(t.string, t.unknown),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      MODE_WALK?: MODE_WALK_.MODE_WALK;
      MODE_BICYCLE?: MODE_BICYCLE_.MODE_BICYCLE;
      MODE_CAR?: MODE_CAR_.MODE_CAR;
      MODE_TRAM?: MODE_TRAM_.MODE_TRAM;
      MODE_SUBWAY?: MODE_SUBWAY_.MODE_SUBWAY;
      MODE_RAIL?: MODE_RAIL_.MODE_RAIL;
      MODE_BUS?: MODE_BUS_.MODE_BUS;
      MODE_FERRY?: MODE_FERRY_.MODE_FERRY;
      MODE_CABLE_CAR?: MODE_CABLE_CAR_.MODE_CABLE_CAR;
      MODE_GONDOLA?: MODE_GONDOLA_.MODE_GONDOLA;
      MODE_FUNICULAR?: MODE_FUNICULAR_.MODE_FUNICULAR;
      MODE_SHARED_BICYCLE?: MODE_SHARED_BICYCLE_.MODE_SHARED_BICYCLE;
      MODE_SHARED_E_BICYCLE?: MODE_SHARED_E_BICYCLE_.MODE_SHARED_E_BICYCLE;
      MODE_SHARED_CAR?: MODE_SHARED_CAR_.MODE_SHARED_CAR;
      MODE_TRANSIT?: MODE_TRANSIT_.MODE_TRANSIT;
      MODE_TRAIN?: MODE_TRAIN_.MODE_TRAIN;
      MODE_TRAINISH?: MODE_TRAINISH_.MODE_TRAINISH;
      MODE_BUSISH?: MODE_BUSISH_.MODE_BUSISH;
      MODE_TAXI?: MODE_TAXI_.MODE_TAXI;
      MODE_SCOOTER?: MODE_SCOOTER_.MODE_SCOOTER;
    } & Record<string, unknown>,
    BookingMetaBrand
  > => true,
  'BookingMeta',
);
export type BookingMetaBrand = {
  readonly BookingMeta: unique symbol;
};

export default BookingMeta;

// Success
