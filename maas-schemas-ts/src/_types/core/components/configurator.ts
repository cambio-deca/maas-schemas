/*

undefined
Configurator schema to customize a booking option

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as ConfiguratorV2_ from './configuratorV2';
import * as ConfiguratorV1_ from './configuratorV1';
import * as Common_ from './common';

export const schemaId = 'https://schemas.maas.global/core/components/configurator.json';

// Configurator
// The default export. More information at the top.
export type Configurator = t.Branded<
  Record<string, unknown> &
    Record<string, unknown> &
    (
      | ConfiguratorV2_.ConfiguratorV2
      | ConfiguratorV1_.ConfiguratorV1
      | Common_.EmptyObject
    ),
  ConfiguratorBrand
>;
export type ConfiguratorC = t.BrandC<
  t.IntersectionC<
    [
      t.UnknownRecordC,
      t.RecordC<t.StringC, t.UnknownC>,
      t.UnionC<
        [
          typeof ConfiguratorV2_.ConfiguratorV2,
          typeof ConfiguratorV1_.ConfiguratorV1,
          typeof Common_.EmptyObject,
        ]
      >,
    ]
  >,
  ConfiguratorBrand
>;
export const Configurator: ConfiguratorC = t.brand(
  t.intersection([
    t.UnknownRecord,
    t.record(t.string, t.unknown),
    t.union([
      ConfiguratorV2_.ConfiguratorV2,
      ConfiguratorV1_.ConfiguratorV1,
      Common_.EmptyObject,
    ]),
  ]),
  (
    x,
  ): x is t.Branded<
    Record<string, unknown> &
      Record<string, unknown> &
      (
        | ConfiguratorV2_.ConfiguratorV2
        | ConfiguratorV1_.ConfiguratorV1
        | Common_.EmptyObject
      ),
    ConfiguratorBrand
  > => true,
  'Configurator',
);
export interface ConfiguratorBrand {
  readonly Configurator: unique symbol;
}

export default Configurator;

// Success
