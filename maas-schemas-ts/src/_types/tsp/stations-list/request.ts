/*

undefined
MaaS stations query request schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as UnitsGeo_ from '../../core/components/units-geo';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'https://schemas.maas.global/tsp/stations-list/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  | (({
      location?: UnitsGeo_.ShortLocationString;
      radius?: UnitsGeo_.Distance;
    } & Record<string, unknown>) & {
      location: Defined;
    })
  | (({
      name?: string;
      count?: number;
      type?: 'origin' | 'destination' | 'viaAvoid';
    } & Record<string, unknown>) & {
      name: Defined;
      type: Defined;
    }),
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.UnionC<
    [
      t.IntersectionC<
        [
          t.IntersectionC<
            [
              t.PartialC<{
                location: typeof UnitsGeo_.ShortLocationString;
                radius: typeof UnitsGeo_.Distance;
              }>,
              t.RecordC<t.StringC, t.UnknownC>,
            ]
          >,
          t.TypeC<{
            location: typeof Defined;
          }>,
        ]
      >,
      t.IntersectionC<
        [
          t.IntersectionC<
            [
              t.PartialC<{
                name: t.StringC;
                count: t.NumberC;
                type: t.UnionC<
                  [
                    t.LiteralC<'origin'>,
                    t.LiteralC<'destination'>,
                    t.LiteralC<'viaAvoid'>,
                  ]
                >;
              }>,
              t.RecordC<t.StringC, t.UnknownC>,
            ]
          >,
          t.TypeC<{
            name: typeof Defined;
            type: typeof Defined;
          }>,
        ]
      >,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.union([
    t.intersection([
      t.intersection([
        t.partial({
          location: UnitsGeo_.ShortLocationString,
          radius: UnitsGeo_.Distance,
        }),
        t.record(t.string, t.unknown),
      ]),
      t.type({
        location: Defined,
      }),
    ]),
    t.intersection([
      t.intersection([
        t.partial({
          name: t.string,
          count: t.number,
          type: t.union([
            t.literal('origin'),
            t.literal('destination'),
            t.literal('viaAvoid'),
          ]),
        }),
        t.record(t.string, t.unknown),
      ]),
      t.type({
        name: Defined,
        type: Defined,
      }),
    ]),
  ]),
  (
    x,
  ): x is t.Branded<
    | (({
        location?: UnitsGeo_.ShortLocationString;
        radius?: UnitsGeo_.Distance;
      } & Record<string, unknown>) & {
        location: Defined;
      })
    | (({
        name?: string;
        count?: number;
        type?: 'origin' | 'destination' | 'viaAvoid';
      } & Record<string, unknown>) & {
        name: Defined;
        type: Defined;
      }),
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

export default Request;

// Success
