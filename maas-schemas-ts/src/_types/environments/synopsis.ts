/*

undefined
Experimental synopsis that combines an environment with related information

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Environments_ from './environments';
import * as Accounts_ from './accounts';
import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import { nonEmptyArray } from 'io-ts-types/lib/nonEmptyArray';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export interface NullBrand {
  readonly Null: unique symbol;
}
export type NullC = t.BrandC<t.UnknownC, NullBrand>;
export const Null: NullC = t.brand(
  t.unknown,
  (n): n is t.Branded<unknown, NullBrand> => n === null,
  'Null',
);
export type Null = t.TypeOf<typeof Null>;

export const schemaId = 'https://schemas.maas.global/environments/synopsis.json';

// GroupMeta
// The purpose of this remains a mystery
export type GroupMeta = t.Branded<
  {
    name?: Environments_.EnvironmentGroupName;
    description?: Environments_.EnvironmentGroupDescription;
  } & {
    name: Defined;
  },
  GroupMetaBrand
>;
export type GroupMetaC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        name: typeof Environments_.EnvironmentGroupName;
        description: typeof Environments_.EnvironmentGroupDescription;
      }>,
      t.TypeC<{
        name: typeof Defined;
      }>,
    ]
  >,
  GroupMetaBrand
>;
export const GroupMeta: GroupMetaC = t.brand(
  t.intersection([
    t.partial({
      name: Environments_.EnvironmentGroupName,
      description: Environments_.EnvironmentGroupDescription,
    }),
    t.type({
      name: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      name?: Environments_.EnvironmentGroupName;
      description?: Environments_.EnvironmentGroupDescription;
    } & {
      name: Defined;
    },
    GroupMetaBrand
  > => true,
  'GroupMeta',
);
export interface GroupMetaBrand {
  readonly GroupMeta: unique symbol;
}

// UnknownAccount
// The environment configuration file is missing the account information
export type UnknownAccount = t.Branded<Null, UnknownAccountBrand>;
export type UnknownAccountC = t.BrandC<typeof Null, UnknownAccountBrand>;
export const UnknownAccount: UnknownAccountC = t.brand(
  Null,
  (x): x is t.Branded<Null, UnknownAccountBrand> => true,
  'UnknownAccount',
);
export interface UnknownAccountBrand {
  readonly UnknownAccount: unique symbol;
}
/** require('io-ts-validator').validator(UnknownAccount).decodeSync(defaultUnknownAccount) // => defaultUnknownAccount */
export const defaultUnknownAccount: UnknownAccount = (null as unknown) as UnknownAccount;

// Synopsis
// The default export. More information at the top.
export type Synopsis = t.Branded<
  {
    environment?: Environments_.Environment;
    group?: GroupMeta;
    account?: UnknownAccount | Accounts_.Account;
  } & {
    environment: Defined;
    group: Defined;
    account: Defined;
  },
  SynopsisBrand
>;
export type SynopsisC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        environment: typeof Environments_.Environment;
        group: typeof GroupMeta;
        account: t.UnionC<[typeof UnknownAccount, typeof Accounts_.Account]>;
      }>,
      t.TypeC<{
        environment: typeof Defined;
        group: typeof Defined;
        account: typeof Defined;
      }>,
    ]
  >,
  SynopsisBrand
>;
export const Synopsis: SynopsisC = t.brand(
  t.intersection([
    t.partial({
      environment: Environments_.Environment,
      group: GroupMeta,
      account: t.union([UnknownAccount, Accounts_.Account]),
    }),
    t.type({
      environment: Defined,
      group: Defined,
      account: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      environment?: Environments_.Environment;
      group?: GroupMeta;
      account?: UnknownAccount | Accounts_.Account;
    } & {
      environment: Defined;
      group: Defined;
      account: Defined;
    },
    SynopsisBrand
  > => true,
  'Synopsis',
);
export interface SynopsisBrand {
  readonly Synopsis: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(Synopsis)).decodeSync(examplesSynopsis) // => examplesSynopsis */
export const examplesSynopsis: NonEmptyArray<Synopsis> = ([
  {
    environment: {
      id: 'production',
      live: true,
      account: 'production',
      description: 'Production environment',
    },
    group: { name: 'Core Environments' },
    account: {
      id: '001234567890',
      name: 'Example Account',
      description: 'This account is but an example account',
    },
  },
  {
    environment: {
      id: 'testing',
      live: false,
      account: 'testing',
      description: 'Testing environment',
    },
    group: { name: 'Core Environments' },
    account: { id: '101234567890' },
  },
  {
    environment: {
      id: 'fantasy-topping',
      live: false,
      account: 'testing',
      name: 'Fantasy Topping',
      description: 'Add support for pizza customization',
    },
    group: { name: 'Development Environments' },
    account: { id: '101234567890' },
  },
] as unknown) as NonEmptyArray<Synopsis>;

export default Synopsis;

// Success
