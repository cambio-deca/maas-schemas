/*

undefined
MaaS verification schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Common_ffba_ from '../../../core/components/common';
import * as I18n_b70d_ from '../../../core/components/i18n';
import * as StateLog_4daf_ from '../../../core/components/state-log';
import * as Units_c404_ from '../../../core/components/units';
import * as KycService_fa21_ from '../../../core/kyc-service';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/customers/verification/verification-object.json';

// Verification
// The purpose of this remains a mystery
export type Verification = t.Branded<
  ({
    id?: string;
    identityId?: Units_c404_.IdentityId;
    kycServiceId?: string;
    url?: Units_c404_.Url;
    token?: string;
    status?: string;
    stateLog?: StateLog_4daf_.StateLog;
    created?: Units_c404_.Time;
    modified?: Units_c404_.Time;
    metadata?:
      | ({
          agencyId?: Common_ffba_.AgencyId;
          locale?: I18n_b70d_.Locale;
        } & Record<string, unknown>)
      | ({
          planId?: string;
          locale?: I18n_b70d_.Locale;
        } & Record<string, unknown>);
    kycService?: KycService_fa21_.KycService;
  } & Record<string, unknown>) & {
    id: Defined;
    identityId: Defined;
    kycServiceId: Defined;
    kycService: Defined;
    status: Defined;
    stateLog: Defined;
  },
  VerificationBrand
>;
export type VerificationC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            id: t.StringC;
            identityId: typeof Units_c404_.IdentityId;
            kycServiceId: t.StringC;
            url: typeof Units_c404_.Url;
            token: t.StringC;
            status: t.StringC;
            stateLog: typeof StateLog_4daf_.StateLog;
            created: typeof Units_c404_.Time;
            modified: typeof Units_c404_.Time;
            metadata: t.UnionC<
              [
                t.IntersectionC<
                  [
                    t.PartialC<{
                      agencyId: typeof Common_ffba_.AgencyId;
                      locale: typeof I18n_b70d_.Locale;
                    }>,
                    t.RecordC<t.StringC, t.UnknownC>,
                  ]
                >,
                t.IntersectionC<
                  [
                    t.PartialC<{
                      planId: t.StringC;
                      locale: typeof I18n_b70d_.Locale;
                    }>,
                    t.RecordC<t.StringC, t.UnknownC>,
                  ]
                >,
              ]
            >;
            kycService: typeof KycService_fa21_.KycService;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        id: typeof Defined;
        identityId: typeof Defined;
        kycServiceId: typeof Defined;
        kycService: typeof Defined;
        status: typeof Defined;
        stateLog: typeof Defined;
      }>,
    ]
  >,
  VerificationBrand
>;
export const Verification: VerificationC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        id: t.string,
        identityId: Units_c404_.IdentityId,
        kycServiceId: t.string,
        url: Units_c404_.Url,
        token: t.string,
        status: t.string,
        stateLog: StateLog_4daf_.StateLog,
        created: Units_c404_.Time,
        modified: Units_c404_.Time,
        metadata: t.union([
          t.intersection([
            t.partial({
              agencyId: Common_ffba_.AgencyId,
              locale: I18n_b70d_.Locale,
            }),
            t.record(t.string, t.unknown),
          ]),
          t.intersection([
            t.partial({
              planId: t.string,
              locale: I18n_b70d_.Locale,
            }),
            t.record(t.string, t.unknown),
          ]),
        ]),
        kycService: KycService_fa21_.KycService,
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      id: Defined,
      identityId: Defined,
      kycServiceId: Defined,
      kycService: Defined,
      status: Defined,
      stateLog: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      id?: string;
      identityId?: Units_c404_.IdentityId;
      kycServiceId?: string;
      url?: Units_c404_.Url;
      token?: string;
      status?: string;
      stateLog?: StateLog_4daf_.StateLog;
      created?: Units_c404_.Time;
      modified?: Units_c404_.Time;
      metadata?:
        | ({
            agencyId?: Common_ffba_.AgencyId;
            locale?: I18n_b70d_.Locale;
          } & Record<string, unknown>)
        | ({
            planId?: string;
            locale?: I18n_b70d_.Locale;
          } & Record<string, unknown>);
      kycService?: KycService_fa21_.KycService;
    } & Record<string, unknown>) & {
      id: Defined;
      identityId: Defined;
      kycServiceId: Defined;
      kycService: Defined;
      status: Defined;
      stateLog: Defined;
    },
    VerificationBrand
  > => true,
  'Verification',
);
export type VerificationBrand = {
  readonly Verification: unique symbol;
};

// VerificationObject
// The default export. More information at the top.
export type VerificationObject = t.Branded<unknown, VerificationObjectBrand>;
export type VerificationObjectC = t.BrandC<t.UnknownC, VerificationObjectBrand>;
export const VerificationObject: VerificationObjectC = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, VerificationObjectBrand> => true,
  'VerificationObject',
);
export type VerificationObjectBrand = {
  readonly VerificationObject: unique symbol;
};

export default VerificationObject;

// Success
