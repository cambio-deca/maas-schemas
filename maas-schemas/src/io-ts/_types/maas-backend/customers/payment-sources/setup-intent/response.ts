/*

undefined
MaaS customer payment sources setup intent create response

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Common_ffba_ from '../../../../core/components/common';
import * as PaymentSource_6d83_ from '../paymentSource';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/customers/payment-sources/setup-intent/response.json';

// Response
// The default export. More information at the top.
export type Response = t.Branded<
  {
    setupIntent?: {
      setupIntentId?: Common_ffba_.PaymentSourceId;
      type?: PaymentSource_6d83_.Type;
      gatewayName?: PaymentSource_6d83_.GatewayName;
      clientSecret?: string;
      isDefault?: boolean;
      alias?: PaymentSource_6d83_.Alias;
      status?: PaymentSource_6d83_.Status;
    } & {
      setupIntentId: Defined;
      type: Defined;
      gatewayName: Defined;
      isDefault: Defined;
      status: Defined;
    };
  } & {
    setupIntent: Defined;
  },
  ResponseBrand
>;
export type ResponseC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        setupIntent: t.IntersectionC<
          [
            t.PartialC<{
              setupIntentId: typeof Common_ffba_.PaymentSourceId;
              type: typeof PaymentSource_6d83_.Type;
              gatewayName: typeof PaymentSource_6d83_.GatewayName;
              clientSecret: t.StringC;
              isDefault: t.BooleanC;
              alias: typeof PaymentSource_6d83_.Alias;
              status: typeof PaymentSource_6d83_.Status;
            }>,
            t.TypeC<{
              setupIntentId: typeof Defined;
              type: typeof Defined;
              gatewayName: typeof Defined;
              isDefault: typeof Defined;
              status: typeof Defined;
            }>,
          ]
        >;
      }>,
      t.TypeC<{
        setupIntent: typeof Defined;
      }>,
    ]
  >,
  ResponseBrand
>;
export const Response: ResponseC = t.brand(
  t.intersection([
    t.partial({
      setupIntent: t.intersection([
        t.partial({
          setupIntentId: Common_ffba_.PaymentSourceId,
          type: PaymentSource_6d83_.Type,
          gatewayName: PaymentSource_6d83_.GatewayName,
          clientSecret: t.string,
          isDefault: t.boolean,
          alias: PaymentSource_6d83_.Alias,
          status: PaymentSource_6d83_.Status,
        }),
        t.type({
          setupIntentId: Defined,
          type: Defined,
          gatewayName: Defined,
          isDefault: Defined,
          status: Defined,
        }),
      ]),
    }),
    t.type({
      setupIntent: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      setupIntent?: {
        setupIntentId?: Common_ffba_.PaymentSourceId;
        type?: PaymentSource_6d83_.Type;
        gatewayName?: PaymentSource_6d83_.GatewayName;
        clientSecret?: string;
        isDefault?: boolean;
        alias?: PaymentSource_6d83_.Alias;
        status?: PaymentSource_6d83_.Status;
      } & {
        setupIntentId: Defined;
        type: Defined;
        gatewayName: Defined;
        isDefault: Defined;
        status: Defined;
      };
    } & {
      setupIntent: Defined;
    },
    ResponseBrand
  > => true,
  'Response',
);
export type ResponseBrand = {
  readonly Response: unique symbol;
};

export default Response;

// Success
