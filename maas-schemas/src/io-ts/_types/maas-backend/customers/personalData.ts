/*

undefined
MaaS customer personal data schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Address_2d0a_ from '../../core/components/address';
import * as Common_ffba_ from '../../core/components/common';
import * as Units_c404_ from '../../core/components/units';

export const schemaId =
  'https://schemas.maas.global/maas-backend/customers/personalData.json';

// Honorifics
// The purpose of this remains a mystery
export type Honorifics = t.Branded<string, HonorificsBrand>;
export type HonorificsC = t.BrandC<t.StringC, HonorificsBrand>;
export const Honorifics: HonorificsC = t.brand(
  t.string,
  (x): x is t.Branded<string, HonorificsBrand> => true,
  'Honorifics',
);
export type HonorificsBrand = {
  readonly Honorifics: unique symbol;
};

// FirstName
// First name of the customer (e.g. John)
export type FirstName = t.Branded<Common_ffba_.PersonalName, FirstNameBrand>;
export type FirstNameC = t.BrandC<typeof Common_ffba_.PersonalName, FirstNameBrand>;
export const FirstName: FirstNameC = t.brand(
  Common_ffba_.PersonalName,
  (x): x is t.Branded<Common_ffba_.PersonalName, FirstNameBrand> => true,
  'FirstName',
);
export type FirstNameBrand = {
  readonly FirstName: unique symbol;
};

// LastName
// Last name of the customer (e.g. Doe)
export type LastName = t.Branded<Common_ffba_.PersonalName, LastNameBrand>;
export type LastNameC = t.BrandC<typeof Common_ffba_.PersonalName, LastNameBrand>;
export const LastName: LastNameC = t.brand(
  Common_ffba_.PersonalName,
  (x): x is t.Branded<Common_ffba_.PersonalName, LastNameBrand> => true,
  'LastName',
);
export type LastNameBrand = {
  readonly LastName: unique symbol;
};

// FirstNameLocalized
// Localized first name of the customer (e.g. John)
export type FirstNameLocalized = t.Branded<
  Common_ffba_.PersonalName,
  FirstNameLocalizedBrand
>;
export type FirstNameLocalizedC = t.BrandC<
  typeof Common_ffba_.PersonalName,
  FirstNameLocalizedBrand
>;
export const FirstNameLocalized: FirstNameLocalizedC = t.brand(
  Common_ffba_.PersonalName,
  (x): x is t.Branded<Common_ffba_.PersonalName, FirstNameLocalizedBrand> => true,
  'FirstNameLocalized',
);
export type FirstNameLocalizedBrand = {
  readonly FirstNameLocalized: unique symbol;
};

// LastNameLocalized
// Localized last name of the customer (e.g. Doe)
export type LastNameLocalized = t.Branded<
  Common_ffba_.PersonalName,
  LastNameLocalizedBrand
>;
export type LastNameLocalizedC = t.BrandC<
  typeof Common_ffba_.PersonalName,
  LastNameLocalizedBrand
>;
export const LastNameLocalized: LastNameLocalizedC = t.brand(
  Common_ffba_.PersonalName,
  (x): x is t.Branded<Common_ffba_.PersonalName, LastNameLocalizedBrand> => true,
  'LastNameLocalized',
);
export type LastNameLocalizedBrand = {
  readonly LastNameLocalized: unique symbol;
};

// Sex
// The purpose of this remains a mystery
export type Sex = t.Branded<string, SexBrand>;
export type SexC = t.BrandC<t.StringC, SexBrand>;
export const Sex: SexC = t.brand(
  t.string,
  (x): x is t.Branded<string, SexBrand> => true,
  'Sex',
);
export type SexBrand = {
  readonly Sex: unique symbol;
};

// Phone
// ITU-T E.164 phone number
export type Phone = t.Branded<Common_ffba_.Phone, PhoneBrand>;
export type PhoneC = t.BrandC<typeof Common_ffba_.Phone, PhoneBrand>;
export const Phone: PhoneC = t.brand(
  Common_ffba_.Phone,
  (x): x is t.Branded<Common_ffba_.Phone, PhoneBrand> => true,
  'Phone',
);
export type PhoneBrand = {
  readonly Phone: unique symbol;
};

// Email
// Rough validation of a valid e-mail address
export type Email = t.Branded<Common_ffba_.Email, EmailBrand>;
export type EmailC = t.BrandC<typeof Common_ffba_.Email, EmailBrand>;
export const Email: EmailC = t.brand(
  Common_ffba_.Email,
  (x): x is t.Branded<Common_ffba_.Email, EmailBrand> => true,
  'Email',
);
export type EmailBrand = {
  readonly Email: unique symbol;
};

// Address
// The purpose of this remains a mystery
export type Address = t.Branded<Address_2d0a_.Address, AddressBrand>;
export type AddressC = t.BrandC<typeof Address_2d0a_.Address, AddressBrand>;
export const Address: AddressC = t.brand(
  Address_2d0a_.Address,
  (x): x is t.Branded<Address_2d0a_.Address, AddressBrand> => true,
  'Address',
);
export type AddressBrand = {
  readonly Address: unique symbol;
};

// CugHome
// The purpose of this remains a mystery
export type CugHome = t.Branded<string, CugHomeBrand>;
export type CugHomeC = t.BrandC<t.StringC, CugHomeBrand>;
export const CugHome: CugHomeC = t.brand(
  t.string,
  (x): x is t.Branded<string, CugHomeBrand> => true,
  'CugHome',
);
export type CugHomeBrand = {
  readonly CugHome: unique symbol;
};

// City
// The purpose of this remains a mystery
export type City = t.Branded<Address_2d0a_.City, CityBrand>;
export type CityC = t.BrandC<typeof Address_2d0a_.City, CityBrand>;
export const City: CityC = t.brand(
  Address_2d0a_.City,
  (x): x is t.Branded<Address_2d0a_.City, CityBrand> => true,
  'City',
);
export type CityBrand = {
  readonly City: unique symbol;
};

// State
// The purpose of this remains a mystery
export type State = t.Branded<Address_2d0a_.State, StateBrand>;
export type StateC = t.BrandC<typeof Address_2d0a_.State, StateBrand>;
export const State: StateC = t.brand(
  Address_2d0a_.State,
  (x): x is t.Branded<Address_2d0a_.State, StateBrand> => true,
  'State',
);
export type StateBrand = {
  readonly State: unique symbol;
};

// Country
// The purpose of this remains a mystery
export type Country = t.Branded<Address_2d0a_.Country, CountryBrand>;
export type CountryC = t.BrandC<typeof Address_2d0a_.Country, CountryBrand>;
export const Country: CountryC = t.brand(
  Address_2d0a_.Country,
  (x): x is t.Branded<Address_2d0a_.Country, CountryBrand> => true,
  'Country',
);
export type CountryBrand = {
  readonly Country: unique symbol;
};

// ZipCode
// The purpose of this remains a mystery
export type ZipCode = t.Branded<Address_2d0a_.ZipCode, ZipCodeBrand>;
export type ZipCodeC = t.BrandC<typeof Address_2d0a_.ZipCode, ZipCodeBrand>;
export const ZipCode: ZipCodeC = t.brand(
  Address_2d0a_.ZipCode,
  (x): x is t.Branded<Address_2d0a_.ZipCode, ZipCodeBrand> => true,
  'ZipCode',
);
export type ZipCodeBrand = {
  readonly ZipCode: unique symbol;
};

// Dob
// The customer's date of birth or boolean indicating if the value is already in DB
export type Dob = t.Branded<boolean | Units_c404_.IsoDate, DobBrand>;
export type DobC = t.BrandC<t.UnionC<[t.BooleanC, typeof Units_c404_.IsoDate]>, DobBrand>;
export const Dob: DobC = t.brand(
  t.union([t.boolean, Units_c404_.IsoDate]),
  (x): x is t.Branded<boolean | Units_c404_.IsoDate, DobBrand> => true,
  'Dob',
);
export type DobBrand = {
  readonly Dob: unique symbol;
};

// Ssid
// Social Security ID
export type Ssid = t.Branded<boolean | Common_ffba_.Ssid, SsidBrand>;
export type SsidC = t.BrandC<t.UnionC<[t.BooleanC, typeof Common_ffba_.Ssid]>, SsidBrand>;
export const Ssid: SsidC = t.brand(
  t.union([t.boolean, Common_ffba_.Ssid]),
  (x): x is t.Branded<boolean | Common_ffba_.Ssid, SsidBrand> => true,
  'Ssid',
);
export type SsidBrand = {
  readonly Ssid: unique symbol;
};

// SsidFi
// Finnish Social Security ID
export type SsidFi = t.Branded<boolean | Common_ffba_.SsidFI, SsidFiBrand>;
export type SsidFiC = t.BrandC<
  t.UnionC<[t.BooleanC, typeof Common_ffba_.SsidFI]>,
  SsidFiBrand
>;
export const SsidFi: SsidFiC = t.brand(
  t.union([t.boolean, Common_ffba_.SsidFI]),
  (x): x is t.Branded<boolean | Common_ffba_.SsidFI, SsidFiBrand> => true,
  'SsidFi',
);
export type SsidFiBrand = {
  readonly SsidFi: unique symbol;
};

// FiscalCodeIt
// Italian fiscal code
export type FiscalCodeIt = t.Branded<string, FiscalCodeItBrand>;
export type FiscalCodeItC = t.BrandC<t.StringC, FiscalCodeItBrand>;
export const FiscalCodeIt: FiscalCodeItC = t.brand(
  t.string,
  (x): x is t.Branded<string, FiscalCodeItBrand> => true,
  'FiscalCodeIt',
);
export type FiscalCodeItBrand = {
  readonly FiscalCodeIt: unique symbol;
};

// SubscriberType
// Subscriber Type
export type SubscriberType = t.Branded<string, SubscriberTypeBrand>;
export type SubscriberTypeC = t.BrandC<t.StringC, SubscriberTypeBrand>;
export const SubscriberType: SubscriberTypeC = t.brand(
  t.string,
  (x): x is t.Branded<string, SubscriberTypeBrand> => true,
  'SubscriberType',
);
export type SubscriberTypeBrand = {
  readonly SubscriberType: unique symbol;
};

// ProfileImageUrl
// The purpose of this remains a mystery
export type ProfileImageUrl = t.Branded<string, ProfileImageUrlBrand>;
export type ProfileImageUrlC = t.BrandC<t.StringC, ProfileImageUrlBrand>;
export const ProfileImageUrl: ProfileImageUrlC = t.brand(
  t.string,
  (x): x is t.Branded<string, ProfileImageUrlBrand> =>
    (typeof x !== 'string' || x.length >= 10) &&
    (typeof x !== 'string' || x.length <= 1024),
  'ProfileImageUrl',
);
export type ProfileImageUrlBrand = {
  readonly ProfileImageUrl: unique symbol;
};

// Nationality
// The purpose of this remains a mystery
export type Nationality = t.Branded<string, NationalityBrand>;
export type NationalityC = t.BrandC<t.StringC, NationalityBrand>;
export const Nationality: NationalityC = t.brand(
  t.string,
  (x): x is t.Branded<string, NationalityBrand> => true,
  'Nationality',
);
export type NationalityBrand = {
  readonly Nationality: unique symbol;
};

// PersonalData
// The default export. More information at the top.
export type PersonalData = t.Branded<
  {
    honorifics?: Honorifics;
    firstName?: FirstName;
    lastName?: LastName;
    firstNameLocalized?: FirstNameLocalized;
    lastNameLocalized?: LastNameLocalized;
    sex?: Sex;
    phone?: Phone;
    email?: Email;
    address?: Address;
    cugHome?: CugHome;
    city?: City;
    state?: State;
    country?: Country;
    zipCode?: ZipCode;
    dob?: Dob;
    ssid?: Ssid;
    'ssid-fi'?: SsidFi;
    'fiscalCode-it'?: FiscalCodeIt;
    subscriberType?: SubscriberType;
    profileImageUrl?: ProfileImageUrl;
    nationality?: Nationality;
  } & {},
  PersonalDataBrand
>;
export type PersonalDataC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        honorifics: typeof Honorifics;
        firstName: typeof FirstName;
        lastName: typeof LastName;
        firstNameLocalized: typeof FirstNameLocalized;
        lastNameLocalized: typeof LastNameLocalized;
        sex: typeof Sex;
        phone: typeof Phone;
        email: typeof Email;
        address: typeof Address;
        cugHome: typeof CugHome;
        city: typeof City;
        state: typeof State;
        country: typeof Country;
        zipCode: typeof ZipCode;
        dob: typeof Dob;
        ssid: typeof Ssid;
        'ssid-fi': typeof SsidFi;
        'fiscalCode-it': typeof FiscalCodeIt;
        subscriberType: typeof SubscriberType;
        profileImageUrl: typeof ProfileImageUrl;
        nationality: typeof Nationality;
      }>,
      t.TypeC<{}>,
    ]
  >,
  PersonalDataBrand
>;
export const PersonalData: PersonalDataC = t.brand(
  t.intersection([
    t.partial({
      honorifics: Honorifics,
      firstName: FirstName,
      lastName: LastName,
      firstNameLocalized: FirstNameLocalized,
      lastNameLocalized: LastNameLocalized,
      sex: Sex,
      phone: Phone,
      email: Email,
      address: Address,
      cugHome: CugHome,
      city: City,
      state: State,
      country: Country,
      zipCode: ZipCode,
      dob: Dob,
      ssid: Ssid,
      'ssid-fi': SsidFi,
      'fiscalCode-it': FiscalCodeIt,
      subscriberType: SubscriberType,
      profileImageUrl: ProfileImageUrl,
      nationality: Nationality,
    }),
    t.type({}),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      honorifics?: Honorifics;
      firstName?: FirstName;
      lastName?: LastName;
      firstNameLocalized?: FirstNameLocalized;
      lastNameLocalized?: LastNameLocalized;
      sex?: Sex;
      phone?: Phone;
      email?: Email;
      address?: Address;
      cugHome?: CugHome;
      city?: City;
      state?: State;
      country?: Country;
      zipCode?: ZipCode;
      dob?: Dob;
      ssid?: Ssid;
      'ssid-fi'?: SsidFi;
      'fiscalCode-it'?: FiscalCodeIt;
      subscriberType?: SubscriberType;
      profileImageUrl?: ProfileImageUrl;
      nationality?: Nationality;
    } & {},
    PersonalDataBrand
  > => true,
  'PersonalData',
);
export type PersonalDataBrand = {
  readonly PersonalData: unique symbol;
};

export default PersonalData;

// Success
