/*

undefined
MaaS virtual card schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as VirtualCardTokenReference_4b72_ from './virtualCardTokenReference';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/customers/virtual-cards/virtualCard.json';

// VirtualCard
// The default export. More information at the top.
export type VirtualCard = t.Branded<
  {
    id?: number;
    providerName?: string;
    providerCardId?: string;
    maskedCardNumber?: string;
    expiryMonth?: number;
    expiryYear?: number;
    status?: string & ('CARD_OK' | 'CARD_BLOCKED');
    tokenReferences?: Array<VirtualCardTokenReference_4b72_.VirtualCardTokenReference>;
  } & {
    id: Defined;
    providerName: Defined;
    providerCardId: Defined;
  },
  VirtualCardBrand
>;
export type VirtualCardC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: t.NumberC;
        providerName: t.StringC;
        providerCardId: t.StringC;
        maskedCardNumber: t.StringC;
        expiryMonth: t.NumberC;
        expiryYear: t.NumberC;
        status: t.IntersectionC<
          [t.StringC, t.UnionC<[t.LiteralC<'CARD_OK'>, t.LiteralC<'CARD_BLOCKED'>]>]
        >;
        tokenReferences: t.ArrayC<
          typeof VirtualCardTokenReference_4b72_.VirtualCardTokenReference
        >;
      }>,
      t.TypeC<{
        id: typeof Defined;
        providerName: typeof Defined;
        providerCardId: typeof Defined;
      }>,
    ]
  >,
  VirtualCardBrand
>;
export const VirtualCard: VirtualCardC = t.brand(
  t.intersection([
    t.partial({
      id: t.number,
      providerName: t.string,
      providerCardId: t.string,
      maskedCardNumber: t.string,
      expiryMonth: t.number,
      expiryYear: t.number,
      status: t.intersection([
        t.string,
        t.union([t.literal('CARD_OK'), t.literal('CARD_BLOCKED')]),
      ]),
      tokenReferences: t.array(VirtualCardTokenReference_4b72_.VirtualCardTokenReference),
    }),
    t.type({
      id: Defined,
      providerName: Defined,
      providerCardId: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: number;
      providerName?: string;
      providerCardId?: string;
      maskedCardNumber?: string;
      expiryMonth?: number;
      expiryYear?: number;
      status?: string & ('CARD_OK' | 'CARD_BLOCKED');
      tokenReferences?: Array<VirtualCardTokenReference_4b72_.VirtualCardTokenReference>;
    } & {
      id: Defined;
      providerName: Defined;
      providerCardId: Defined;
    },
    VirtualCardBrand
  > => true,
  'VirtualCard',
);
export type VirtualCardBrand = {
  readonly VirtualCard: unique symbol;
};

export default VirtualCard;

// Success
