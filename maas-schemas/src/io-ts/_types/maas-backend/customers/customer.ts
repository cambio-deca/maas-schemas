/*

undefined
MaaS customer schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Booking_4353_ from '../../core/booking';
import * as Authorization_22a5_ from '../../core/components/authorization';
import * as Common_ffba_ from '../../core/components/common';
import * as Cost_250f_ from '../../core/components/cost';
import * as Fare_a3ab_ from '../../core/components/fare';
import * as State_2db3_ from '../../core/components/state';
import * as Units_c404_ from '../../core/components/units';
import * as PersonalDocument_9750_ from '../../core/personal-document';
import * as Region_ad49_ from '../../core/region';
import * as PaymentSource_6d83_ from './payment-sources/paymentSource';
import * as PersonalData_8afd_ from './personalData';
import * as VerificationObject_7f82_ from './verification/verification-object';
import * as VirtualCard_006f_ from './virtual-cards/virtualCard';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/customers/customer.json';

// Customer
// The default export. More information at the top.
export type Customer = t.Branded<
  {
    identityId?: Units_c404_.IdentityId;
    profileImageUrl?: string;
    personalData?: PersonalData_8afd_.PersonalData;
    personalDataVerifiedItems?: Array<string>;
    paymentSources?: Array<PaymentSource_6d83_.PaymentSource>;
    balances?: Array<Fare_a3ab_.Fare | Cost_250f_.Cost>;
    region?: Region_ad49_.Region;
    authorizations?: Array<Authorization_22a5_.Authorization>;
    favoriteLocations?: Array<Record<string, unknown> & Record<string, unknown>>;
    personalDocuments?: Array<
      ({
        type?: PersonalDocument_9750_.DocumentType;
        status?: PersonalDocument_9750_.DocumentStatus;
      } & Record<string, unknown>) & {
        type: Defined;
        status: Defined;
      }
    >;
    personalDocumentConsents?: Array<Common_ffba_.AgencyId>;
    virtualCards?: Array<VirtualCard_006f_.VirtualCard>;
    verifications?: Array<VerificationObject_7f82_.VerificationObject>;
    lastBooking?: {
      id?: Booking_4353_.Id;
      state?: State_2db3_.BookingState;
      created?: Units_c404_.Time;
    } & Record<string, unknown>;
  } & {
    personalData: Defined;
    paymentSources: Defined;
    balances: Defined;
    region: Defined;
    authorizations: Defined;
  },
  CustomerBrand
>;
export type CustomerC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        identityId: typeof Units_c404_.IdentityId;
        profileImageUrl: t.StringC;
        personalData: typeof PersonalData_8afd_.PersonalData;
        personalDataVerifiedItems: t.ArrayC<t.StringC>;
        paymentSources: t.ArrayC<typeof PaymentSource_6d83_.PaymentSource>;
        balances: t.ArrayC<t.UnionC<[typeof Fare_a3ab_.Fare, typeof Cost_250f_.Cost]>>;
        region: typeof Region_ad49_.Region;
        authorizations: t.ArrayC<typeof Authorization_22a5_.Authorization>;
        favoriteLocations: t.ArrayC<
          t.IntersectionC<[t.UnknownRecordC, t.RecordC<t.StringC, t.UnknownC>]>
        >;
        personalDocuments: t.ArrayC<
          t.IntersectionC<
            [
              t.IntersectionC<
                [
                  t.PartialC<{
                    type: typeof PersonalDocument_9750_.DocumentType;
                    status: typeof PersonalDocument_9750_.DocumentStatus;
                  }>,
                  t.RecordC<t.StringC, t.UnknownC>,
                ]
              >,
              t.TypeC<{
                type: typeof Defined;
                status: typeof Defined;
              }>,
            ]
          >
        >;
        personalDocumentConsents: t.ArrayC<typeof Common_ffba_.AgencyId>;
        virtualCards: t.ArrayC<typeof VirtualCard_006f_.VirtualCard>;
        verifications: t.ArrayC<typeof VerificationObject_7f82_.VerificationObject>;
        lastBooking: t.IntersectionC<
          [
            t.PartialC<{
              id: typeof Booking_4353_.Id;
              state: typeof State_2db3_.BookingState;
              created: typeof Units_c404_.Time;
            }>,
            t.RecordC<t.StringC, t.UnknownC>,
          ]
        >;
      }>,
      t.TypeC<{
        personalData: typeof Defined;
        paymentSources: typeof Defined;
        balances: typeof Defined;
        region: typeof Defined;
        authorizations: typeof Defined;
      }>,
    ]
  >,
  CustomerBrand
>;
export const Customer: CustomerC = t.brand(
  t.intersection([
    t.partial({
      identityId: Units_c404_.IdentityId,
      profileImageUrl: t.string,
      personalData: PersonalData_8afd_.PersonalData,
      personalDataVerifiedItems: t.array(t.string),
      paymentSources: t.array(PaymentSource_6d83_.PaymentSource),
      balances: t.array(t.union([Fare_a3ab_.Fare, Cost_250f_.Cost])),
      region: Region_ad49_.Region,
      authorizations: t.array(Authorization_22a5_.Authorization),
      favoriteLocations: t.array(
        t.intersection([t.UnknownRecord, t.record(t.string, t.unknown)]),
      ),
      personalDocuments: t.array(
        t.intersection([
          t.intersection([
            t.partial({
              type: PersonalDocument_9750_.DocumentType,
              status: PersonalDocument_9750_.DocumentStatus,
            }),
            t.record(t.string, t.unknown),
          ]),
          t.type({
            type: Defined,
            status: Defined,
          }),
        ]),
      ),
      personalDocumentConsents: t.array(Common_ffba_.AgencyId),
      virtualCards: t.array(VirtualCard_006f_.VirtualCard),
      verifications: t.array(VerificationObject_7f82_.VerificationObject),
      lastBooking: t.intersection([
        t.partial({
          id: Booking_4353_.Id,
          state: State_2db3_.BookingState,
          created: Units_c404_.Time,
        }),
        t.record(t.string, t.unknown),
      ]),
    }),
    t.type({
      personalData: Defined,
      paymentSources: Defined,
      balances: Defined,
      region: Defined,
      authorizations: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_c404_.IdentityId;
      profileImageUrl?: string;
      personalData?: PersonalData_8afd_.PersonalData;
      personalDataVerifiedItems?: Array<string>;
      paymentSources?: Array<PaymentSource_6d83_.PaymentSource>;
      balances?: Array<Fare_a3ab_.Fare | Cost_250f_.Cost>;
      region?: Region_ad49_.Region;
      authorizations?: Array<Authorization_22a5_.Authorization>;
      favoriteLocations?: Array<Record<string, unknown> & Record<string, unknown>>;
      personalDocuments?: Array<
        ({
          type?: PersonalDocument_9750_.DocumentType;
          status?: PersonalDocument_9750_.DocumentStatus;
        } & Record<string, unknown>) & {
          type: Defined;
          status: Defined;
        }
      >;
      personalDocumentConsents?: Array<Common_ffba_.AgencyId>;
      virtualCards?: Array<VirtualCard_006f_.VirtualCard>;
      verifications?: Array<VerificationObject_7f82_.VerificationObject>;
      lastBooking?: {
        id?: Booking_4353_.Id;
        state?: State_2db3_.BookingState;
        created?: Units_c404_.Time;
      } & Record<string, unknown>;
    } & {
      personalData: Defined;
      paymentSources: Defined;
      balances: Defined;
      region: Defined;
      authorizations: Defined;
    },
    CustomerBrand
  > => true,
  'Customer',
);
export type CustomerBrand = {
  readonly Customer: unique symbol;
};

export default Customer;

// Success
