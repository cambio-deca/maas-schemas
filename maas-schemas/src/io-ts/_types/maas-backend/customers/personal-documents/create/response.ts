/*

undefined
Insert a pending verification personal document object

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as PersonalDocument_9750_ from '../../../../core/personal-document';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/customers/personal-documents/create/response.json';

// Response
// The default export. More information at the top.
export type Response = t.Branded<
  ({
    type?: PersonalDocument_9750_.DocumentType;
    status?: PersonalDocument_9750_.DocumentStatus;
  } & Record<string, unknown>) & {
    type: Defined;
    status: Defined;
  },
  ResponseBrand
>;
export type ResponseC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            type: typeof PersonalDocument_9750_.DocumentType;
            status: typeof PersonalDocument_9750_.DocumentStatus;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        type: typeof Defined;
        status: typeof Defined;
      }>,
    ]
  >,
  ResponseBrand
>;
export const Response: ResponseC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        type: PersonalDocument_9750_.DocumentType,
        status: PersonalDocument_9750_.DocumentStatus,
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      type: Defined,
      status: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      type?: PersonalDocument_9750_.DocumentType;
      status?: PersonalDocument_9750_.DocumentStatus;
    } & Record<string, unknown>) & {
      type: Defined;
      status: Defined;
    },
    ResponseBrand
  > => true,
  'Response',
);
export type ResponseBrand = {
  readonly Response: unique symbol;
};

export default Response;

// Success
