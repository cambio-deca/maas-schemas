/*

undefined
MaaS subscription address schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Address_2d0a_ from '../../core/components/address';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/subscriptions/subscriptionAddress.json';

// SubscriptionAddress
// The purpose of this remains a mystery
export type SubscriptionAddress = t.Branded<
  {
    firstName?: Address_2d0a_.FirstName;
    lastName?: Address_2d0a_.LastName;
    city?: Address_2d0a_.City;
    zipCode?: Address_2d0a_.ZipCode;
    country?: Address_2d0a_.Country;
    phone?: Address_2d0a_.Phone;
    email?: Address_2d0a_.Email;
  } & {
    zipCode: Defined;
    country: Defined;
  },
  SubscriptionAddressBrand
>;
export type SubscriptionAddressC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        firstName: typeof Address_2d0a_.FirstName;
        lastName: typeof Address_2d0a_.LastName;
        city: typeof Address_2d0a_.City;
        zipCode: typeof Address_2d0a_.ZipCode;
        country: typeof Address_2d0a_.Country;
        phone: typeof Address_2d0a_.Phone;
        email: typeof Address_2d0a_.Email;
      }>,
      t.TypeC<{
        zipCode: typeof Defined;
        country: typeof Defined;
      }>,
    ]
  >,
  SubscriptionAddressBrand
>;
export const SubscriptionAddress: SubscriptionAddressC = t.brand(
  t.intersection([
    t.partial({
      firstName: Address_2d0a_.FirstName,
      lastName: Address_2d0a_.LastName,
      city: Address_2d0a_.City,
      zipCode: Address_2d0a_.ZipCode,
      country: Address_2d0a_.Country,
      phone: Address_2d0a_.Phone,
      email: Address_2d0a_.Email,
    }),
    t.type({
      zipCode: Defined,
      country: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      firstName?: Address_2d0a_.FirstName;
      lastName?: Address_2d0a_.LastName;
      city?: Address_2d0a_.City;
      zipCode?: Address_2d0a_.ZipCode;
      country?: Address_2d0a_.Country;
      phone?: Address_2d0a_.Phone;
      email?: Address_2d0a_.Email;
    } & {
      zipCode: Defined;
      country: Defined;
    },
    SubscriptionAddressBrand
  > => true,
  'SubscriptionAddress',
);
export type SubscriptionAddressBrand = {
  readonly SubscriptionAddress: unique symbol;
};

// Success
