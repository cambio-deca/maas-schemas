/*

undefined
MaaS webhook to update bookings for tsp adapter callback request schema.

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Common_ffba_ from '../../../core/components/common';
import * as RemoteRequest_1d79_ from '../../../tsp/webhooks-bookings-update/remote-request';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/webhooks/webhooks-bookings-update/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  ({
    agencyId?: Common_ffba_.AgencyId;
    payload?: RemoteRequest_1d79_.RemoteRequest;
  } & Record<string, unknown>) & {
    agencyId: Defined;
    payload: Defined;
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            agencyId: typeof Common_ffba_.AgencyId;
            payload: typeof RemoteRequest_1d79_.RemoteRequest;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        agencyId: typeof Defined;
        payload: typeof Defined;
      }>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        agencyId: Common_ffba_.AgencyId,
        payload: RemoteRequest_1d79_.RemoteRequest,
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      agencyId: Defined,
      payload: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      agencyId?: Common_ffba_.AgencyId;
      payload?: RemoteRequest_1d79_.RemoteRequest;
    } & Record<string, unknown>) & {
      agencyId: Defined;
      payload: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export type RequestBrand = {
  readonly Request: unique symbol;
};

export default Request;

// Success
