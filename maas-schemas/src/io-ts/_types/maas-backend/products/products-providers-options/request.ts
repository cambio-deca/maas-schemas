/*

undefined
Request schema for products-providers-options

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as ApiCommon_16a4_ from '../../../core/components/api-common';
import * as Units_c404_ from '../../../core/components/units';
import * as UnitsGeo_3e31_ from '../../../core/components/units-geo';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/products/products-providers-options/request.json';

// Payload
// The purpose of this remains a mystery
export type Payload = t.Branded<
  ({
    lat?: UnitsGeo_3e31_.RelaxedLatitude;
    lon?: UnitsGeo_3e31_.RelaxedLongitude;
  } & Record<string, unknown>) & {
    lat: Defined;
    lon: Defined;
  },
  PayloadBrand
>;
export type PayloadC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            lat: typeof UnitsGeo_3e31_.RelaxedLatitude;
            lon: typeof UnitsGeo_3e31_.RelaxedLongitude;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        lat: typeof Defined;
        lon: typeof Defined;
      }>,
    ]
  >,
  PayloadBrand
>;
export const Payload: PayloadC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        lat: UnitsGeo_3e31_.RelaxedLatitude,
        lon: UnitsGeo_3e31_.RelaxedLongitude,
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      lat: Defined,
      lon: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      lat?: UnitsGeo_3e31_.RelaxedLatitude;
      lon?: UnitsGeo_3e31_.RelaxedLongitude;
    } & Record<string, unknown>) & {
      lat: Defined;
      lon: Defined;
    },
    PayloadBrand
  > => true,
  'Payload',
);
export type PayloadBrand = {
  readonly Payload: unique symbol;
};

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  {
    identityId?: Units_c404_.IdentityId;
    payload?: Payload;
    headers?: ApiCommon_16a4_.Headers;
  } & {
    identityId: Defined;
    payload: Defined;
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        identityId: typeof Units_c404_.IdentityId;
        payload: typeof Payload;
        headers: typeof ApiCommon_16a4_.Headers;
      }>,
      t.TypeC<{
        identityId: typeof Defined;
        payload: typeof Defined;
      }>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.partial({
      identityId: Units_c404_.IdentityId,
      payload: Payload,
      headers: ApiCommon_16a4_.Headers,
    }),
    t.type({
      identityId: Defined,
      payload: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_c404_.IdentityId;
      payload?: Payload;
      headers?: ApiCommon_16a4_.Headers;
    } & {
      identityId: Defined;
      payload: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export type RequestBrand = {
  readonly Request: unique symbol;
};

export default Request;

// Success
