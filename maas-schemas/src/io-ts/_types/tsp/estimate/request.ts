/*

undefined
Request schema for estimating a configured product option

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as CustomerSelection_57c3_ from '../../core/components/customerSelection';
import * as Customer_c745_ from '../../core/customer';
import * as ProductOption_5313_ from '../../core/product-option';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'https://schemas.maas.global/tsp/estimate/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  ({
    productOption?: ProductOption_5313_.ProductOption;
    customer?: Customer_c745_.Customer;
    customerSelection?: CustomerSelection_57c3_.CustomerSelection;
  } & Record<string, unknown>) & {
    productOption: Defined;
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            productOption: typeof ProductOption_5313_.ProductOption;
            customer: typeof Customer_c745_.Customer;
            customerSelection: typeof CustomerSelection_57c3_.CustomerSelection;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        productOption: typeof Defined;
      }>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        productOption: ProductOption_5313_.ProductOption,
        customer: Customer_c745_.Customer,
        customerSelection: CustomerSelection_57c3_.CustomerSelection,
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      productOption: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      productOption?: ProductOption_5313_.ProductOption;
      customer?: Customer_c745_.Customer;
      customerSelection?: CustomerSelection_57c3_.CustomerSelection;
    } & Record<string, unknown>) & {
      productOption: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export type RequestBrand = {
  readonly Request: unique symbol;
};

export default Request;

// Success
