/*

undefined
Request schema for getting journey options from a TSP adapter.

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Address_2d0a_ from '../../core/components/address';
import * as Station_dfde_ from '../../core/components/station';
import * as Units_c404_ from '../../core/components/units';
import * as UnitsGeo_3e31_ from '../../core/components/units-geo';

export const schemaId = 'https://schemas.maas.global/tsp/journey-planner/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  {
    payload?: {
      from?: UnitsGeo_3e31_.ShortLocationString;
      fromName?: Address_2d0a_.PlaceName;
      fromAddress?: Address_2d0a_.ComponentAddress;
      fromStationId?: Station_dfde_.Id;
      to?: UnitsGeo_3e31_.ShortLocationString;
      toName?: Address_2d0a_.PlaceName;
      toAddress?: Address_2d0a_.ComponentAddress;
      toStationId?: Station_dfde_.Id;
      leaveAt?: Units_c404_.Time;
      arriveBy?: Units_c404_.Time;
      leaveAtReturn?: Units_c404_.Time;
      arriveByReturn?: Units_c404_.Time;
      mode?: string;
    } & Record<string, unknown>;
  } & Record<
    string,
    | ({
        from?: UnitsGeo_3e31_.ShortLocationString;
        fromName?: Address_2d0a_.PlaceName;
        fromAddress?: Address_2d0a_.ComponentAddress;
        fromStationId?: Station_dfde_.Id;
        to?: UnitsGeo_3e31_.ShortLocationString;
        toName?: Address_2d0a_.PlaceName;
        toAddress?: Address_2d0a_.ComponentAddress;
        toStationId?: Station_dfde_.Id;
        leaveAt?: Units_c404_.Time;
        arriveBy?: Units_c404_.Time;
        leaveAtReturn?: Units_c404_.Time;
        arriveByReturn?: Units_c404_.Time;
        mode?: string;
      } & Record<string, unknown>)
    | (string | number | boolean)
  > &
    Record<string, unknown>,
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        payload: t.IntersectionC<
          [
            t.PartialC<{
              from: typeof UnitsGeo_3e31_.ShortLocationString;
              fromName: typeof Address_2d0a_.PlaceName;
              fromAddress: typeof Address_2d0a_.ComponentAddress;
              fromStationId: typeof Station_dfde_.Id;
              to: typeof UnitsGeo_3e31_.ShortLocationString;
              toName: typeof Address_2d0a_.PlaceName;
              toAddress: typeof Address_2d0a_.ComponentAddress;
              toStationId: typeof Station_dfde_.Id;
              leaveAt: typeof Units_c404_.Time;
              arriveBy: typeof Units_c404_.Time;
              leaveAtReturn: typeof Units_c404_.Time;
              arriveByReturn: typeof Units_c404_.Time;
              mode: t.StringC;
            }>,
            t.RecordC<t.StringC, t.UnknownC>,
          ]
        >;
      }>,
      t.RecordC<
        t.StringC,
        t.UnionC<
          [
            t.IntersectionC<
              [
                t.PartialC<{
                  from: typeof UnitsGeo_3e31_.ShortLocationString;
                  fromName: typeof Address_2d0a_.PlaceName;
                  fromAddress: typeof Address_2d0a_.ComponentAddress;
                  fromStationId: typeof Station_dfde_.Id;
                  to: typeof UnitsGeo_3e31_.ShortLocationString;
                  toName: typeof Address_2d0a_.PlaceName;
                  toAddress: typeof Address_2d0a_.ComponentAddress;
                  toStationId: typeof Station_dfde_.Id;
                  leaveAt: typeof Units_c404_.Time;
                  arriveBy: typeof Units_c404_.Time;
                  leaveAtReturn: typeof Units_c404_.Time;
                  arriveByReturn: typeof Units_c404_.Time;
                  mode: t.StringC;
                }>,
                t.RecordC<t.StringC, t.UnknownC>,
              ]
            >,
            t.UnionC<[t.StringC, t.NumberC, t.BooleanC]>,
          ]
        >
      >,
      t.RecordC<t.StringC, t.UnknownC>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.partial({
      payload: t.intersection([
        t.partial({
          from: UnitsGeo_3e31_.ShortLocationString,
          fromName: Address_2d0a_.PlaceName,
          fromAddress: Address_2d0a_.ComponentAddress,
          fromStationId: Station_dfde_.Id,
          to: UnitsGeo_3e31_.ShortLocationString,
          toName: Address_2d0a_.PlaceName,
          toAddress: Address_2d0a_.ComponentAddress,
          toStationId: Station_dfde_.Id,
          leaveAt: Units_c404_.Time,
          arriveBy: Units_c404_.Time,
          leaveAtReturn: Units_c404_.Time,
          arriveByReturn: Units_c404_.Time,
          mode: t.string,
        }),
        t.record(t.string, t.unknown),
      ]),
    }),
    t.record(
      t.string,
      t.union([
        t.intersection([
          t.partial({
            from: UnitsGeo_3e31_.ShortLocationString,
            fromName: Address_2d0a_.PlaceName,
            fromAddress: Address_2d0a_.ComponentAddress,
            fromStationId: Station_dfde_.Id,
            to: UnitsGeo_3e31_.ShortLocationString,
            toName: Address_2d0a_.PlaceName,
            toAddress: Address_2d0a_.ComponentAddress,
            toStationId: Station_dfde_.Id,
            leaveAt: Units_c404_.Time,
            arriveBy: Units_c404_.Time,
            leaveAtReturn: Units_c404_.Time,
            arriveByReturn: Units_c404_.Time,
            mode: t.string,
          }),
          t.record(t.string, t.unknown),
        ]),
        t.union([t.string, t.number, t.boolean]),
      ]),
    ),
    t.record(t.string, t.unknown),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      payload?: {
        from?: UnitsGeo_3e31_.ShortLocationString;
        fromName?: Address_2d0a_.PlaceName;
        fromAddress?: Address_2d0a_.ComponentAddress;
        fromStationId?: Station_dfde_.Id;
        to?: UnitsGeo_3e31_.ShortLocationString;
        toName?: Address_2d0a_.PlaceName;
        toAddress?: Address_2d0a_.ComponentAddress;
        toStationId?: Station_dfde_.Id;
        leaveAt?: Units_c404_.Time;
        arriveBy?: Units_c404_.Time;
        leaveAtReturn?: Units_c404_.Time;
        arriveByReturn?: Units_c404_.Time;
        mode?: string;
      } & Record<string, unknown>;
    } & Record<
      string,
      | ({
          from?: UnitsGeo_3e31_.ShortLocationString;
          fromName?: Address_2d0a_.PlaceName;
          fromAddress?: Address_2d0a_.ComponentAddress;
          fromStationId?: Station_dfde_.Id;
          to?: UnitsGeo_3e31_.ShortLocationString;
          toName?: Address_2d0a_.PlaceName;
          toAddress?: Address_2d0a_.ComponentAddress;
          toStationId?: Station_dfde_.Id;
          leaveAt?: Units_c404_.Time;
          arriveBy?: Units_c404_.Time;
          leaveAtReturn?: Units_c404_.Time;
          arriveByReturn?: Units_c404_.Time;
          mode?: string;
        } & Record<string, unknown>)
      | (string | number | boolean)
    > &
      Record<string, unknown>,
    RequestBrand
  > => true,
  'Request',
);
export type RequestBrand = {
  readonly Request: unique symbol;
};

export default Request;

// Success
