/*

undefined
Response schema for getting options from a TSP adapter

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import * as t from 'io-ts';
import { nonEmptyArray } from 'io-ts-types/lib/nonEmptyArray';

import * as BookingOption_9a80_ from '../../core/booking-option';
import * as BikeStation_4888_ from '../../core/components/bike-station';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/tsp/booking-options-list/response.json';

// Response
// The default export. More information at the top.
export type Response = t.Branded<
  {
    options?: Array<BookingOption_9a80_.BookingOption>;
    additional?: {
      bikeStations?: Array<BikeStation_4888_.BikeStation>;
    } & Record<string, unknown>;
  } & {
    options: Defined;
  },
  ResponseBrand
>;
export type ResponseC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        options: t.ArrayC<typeof BookingOption_9a80_.BookingOption>;
        additional: t.IntersectionC<
          [
            t.PartialC<{
              bikeStations: t.ArrayC<typeof BikeStation_4888_.BikeStation>;
            }>,
            t.RecordC<t.StringC, t.UnknownC>,
          ]
        >;
      }>,
      t.TypeC<{
        options: typeof Defined;
      }>,
    ]
  >,
  ResponseBrand
>;
export const Response: ResponseC = t.brand(
  t.intersection([
    t.partial({
      options: t.array(BookingOption_9a80_.BookingOption),
      additional: t.intersection([
        t.partial({
          bikeStations: t.array(BikeStation_4888_.BikeStation),
        }),
        t.record(t.string, t.unknown),
      ]),
    }),
    t.type({
      options: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      options?: Array<BookingOption_9a80_.BookingOption>;
      additional?: {
        bikeStations?: Array<BikeStation_4888_.BikeStation>;
      } & Record<string, unknown>;
    } & {
      options: Defined;
    },
    ResponseBrand
  > => true,
  'Response',
);
export type ResponseBrand = {
  readonly Response: unique symbol;
};
/** require('io-ts-validator').validator(nonEmptyArray(Response)).decodeSync(examplesResponse) // => examplesResponse */
export const examplesResponse: NonEmptyArray<Response> = [
  {
    options: [
      {
        cost: { amount: 16.7, currency: 'EUR' },
        terms: {},
        meta: {
          MODE_TAXI: {},
          valopilkku: {
            name: 'Helsingin Taksi-Data Oy',
            settings: { telephone: '+3581000700' },
            capabilities: 929,
            id: 104,
            order_price: '0.00',
            preorder_price: '7.10',
          },
        },
        tspProduct: { id: 'HTD-any' },
        leg: {
          from: {
            name: 'Töölönlahdenkatu 2, FI-00100 Helsinki, Suomi',
            lat: 60.17252,
            lon: 24.93789,
          },
          to: {
            name: 'Nuuksiontie 82, FI-02820 Espoo, Suomi',
            lat: 60.293641,
            lon: 24.557928,
          },
          startTime: 1473937376382,
          endTime: 1474021856382,
          mode: 'TAXI',
        },
      },
    ],
  },
] as unknown as NonEmptyArray<Response>;

export default Response;

// Success
