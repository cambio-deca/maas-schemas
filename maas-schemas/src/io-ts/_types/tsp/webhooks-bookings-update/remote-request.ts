/*

undefined
Remote request schema, e.g. how TSP should call MaaS-backend

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Booking_4353_ from '../../core/booking';
import * as BookingMeta_c057_ from '../../core/booking-meta';
import * as BookingOption_9a80_ from '../../core/booking-option';
import * as Error_b620_ from '../../core/error';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/tsp/webhooks-bookings-update/remote-request.json';

// RemoteRequest
// The default export. More information at the top.
export type RemoteRequest = t.Branded<
  {
    tspId?: Booking_4353_.TspId;
    cost?: Booking_4353_.Cost;
    state?:
      | 'RESERVED'
      | 'CONFIRMED'
      | 'ARRIVED'
      | 'ACTIVATED'
      | 'EXPIRED'
      | 'CANCELLED'
      | 'REJECTED';
    leg?: BookingOption_9a80_.LegDelta;
    meta?: BookingMeta_c057_.BookingMeta;
    terms?: Booking_4353_.Terms;
    token?: Booking_4353_.Token;
    reason?: Error_b620_.Reason;
  } & {
    tspId: Defined;
    state: Defined;
  },
  RemoteRequestBrand
>;
export type RemoteRequestC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        tspId: typeof Booking_4353_.TspId;
        cost: typeof Booking_4353_.Cost;
        state: t.UnionC<
          [
            t.LiteralC<'RESERVED'>,
            t.LiteralC<'CONFIRMED'>,
            t.LiteralC<'ARRIVED'>,
            t.LiteralC<'ACTIVATED'>,
            t.LiteralC<'EXPIRED'>,
            t.LiteralC<'CANCELLED'>,
            t.LiteralC<'REJECTED'>,
          ]
        >;
        leg: typeof BookingOption_9a80_.LegDelta;
        meta: typeof BookingMeta_c057_.BookingMeta;
        terms: typeof Booking_4353_.Terms;
        token: typeof Booking_4353_.Token;
        reason: typeof Error_b620_.Reason;
      }>,
      t.TypeC<{
        tspId: typeof Defined;
        state: typeof Defined;
      }>,
    ]
  >,
  RemoteRequestBrand
>;
export const RemoteRequest: RemoteRequestC = t.brand(
  t.intersection([
    t.partial({
      tspId: Booking_4353_.TspId,
      cost: Booking_4353_.Cost,
      state: t.union([
        t.literal('RESERVED'),
        t.literal('CONFIRMED'),
        t.literal('ARRIVED'),
        t.literal('ACTIVATED'),
        t.literal('EXPIRED'),
        t.literal('CANCELLED'),
        t.literal('REJECTED'),
      ]),
      leg: BookingOption_9a80_.LegDelta,
      meta: BookingMeta_c057_.BookingMeta,
      terms: Booking_4353_.Terms,
      token: Booking_4353_.Token,
      reason: Error_b620_.Reason,
    }),
    t.type({
      tspId: Defined,
      state: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      tspId?: Booking_4353_.TspId;
      cost?: Booking_4353_.Cost;
      state?:
        | 'RESERVED'
        | 'CONFIRMED'
        | 'ARRIVED'
        | 'ACTIVATED'
        | 'EXPIRED'
        | 'CANCELLED'
        | 'REJECTED';
      leg?: BookingOption_9a80_.LegDelta;
      meta?: BookingMeta_c057_.BookingMeta;
      terms?: Booking_4353_.Terms;
      token?: Booking_4353_.Token;
      reason?: Error_b620_.Reason;
    } & {
      tspId: Defined;
      state: Defined;
    },
    RemoteRequestBrand
  > => true,
  'RemoteRequest',
);
export type RemoteRequestBrand = {
  readonly RemoteRequest: unique symbol;
};

export default RemoteRequest;

// Success
