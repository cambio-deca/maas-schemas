/*

undefined
Customer's favorite location

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Address_2d0a_ from './components/address';
import * as Common_ffba_ from './components/common';
import * as Station_dfde_ from './components/station';
import * as Units_c404_ from './components/units';
import * as UnitsGeo_3e31_ from './components/units-geo';

export const schemaId = 'https://schemas.maas.global/core/partialFavoriteLocation.json';

// FavoriteLocationTypes
// The purpose of this remains a mystery
export type FavoriteLocationTypes = t.Branded<
  string & ('ADDRESS' | 'STOP'),
  FavoriteLocationTypesBrand
>;
export type FavoriteLocationTypesC = t.BrandC<
  t.IntersectionC<[t.StringC, t.UnionC<[t.LiteralC<'ADDRESS'>, t.LiteralC<'STOP'>]>]>,
  FavoriteLocationTypesBrand
>;
export const FavoriteLocationTypes: FavoriteLocationTypesC = t.brand(
  t.intersection([t.string, t.union([t.literal('ADDRESS'), t.literal('STOP')])]),
  (x): x is t.Branded<string & ('ADDRESS' | 'STOP'), FavoriteLocationTypesBrand> => true,
  'FavoriteLocationTypes',
);
export type FavoriteLocationTypesBrand = {
  readonly FavoriteLocationTypes: unique symbol;
};

// FavoriteLocationTypesADDRESS
// The purpose of this remains a mystery
export type FavoriteLocationTypesADDRESS = t.Branded<
  FavoriteLocationTypes & 'ADDRESS',
  FavoriteLocationTypesADDRESSBrand
>;
export type FavoriteLocationTypesADDRESSC = t.BrandC<
  t.IntersectionC<[typeof FavoriteLocationTypes, t.LiteralC<'ADDRESS'>]>,
  FavoriteLocationTypesADDRESSBrand
>;
export const FavoriteLocationTypesADDRESS: FavoriteLocationTypesADDRESSC = t.brand(
  t.intersection([FavoriteLocationTypes, t.literal('ADDRESS')]),
  (
    x,
  ): x is t.Branded<
    FavoriteLocationTypes & 'ADDRESS',
    FavoriteLocationTypesADDRESSBrand
  > => true,
  'FavoriteLocationTypesADDRESS',
);
export type FavoriteLocationTypesADDRESSBrand = {
  readonly FavoriteLocationTypesADDRESS: unique symbol;
};
/** require('io-ts-validator').validator(FavoriteLocationTypesADDRESS).decodeSync(defaultFavoriteLocationTypesADDRESS) // => defaultFavoriteLocationTypesADDRESS */
export const defaultFavoriteLocationTypesADDRESS: FavoriteLocationTypesADDRESS =
  'ADDRESS' as unknown as FavoriteLocationTypesADDRESS;

// FavoriteLocationTypesSTOP
// The purpose of this remains a mystery
export type FavoriteLocationTypesSTOP = t.Branded<
  FavoriteLocationTypes & 'STOP',
  FavoriteLocationTypesSTOPBrand
>;
export type FavoriteLocationTypesSTOPC = t.BrandC<
  t.IntersectionC<[typeof FavoriteLocationTypes, t.LiteralC<'STOP'>]>,
  FavoriteLocationTypesSTOPBrand
>;
export const FavoriteLocationTypesSTOP: FavoriteLocationTypesSTOPC = t.brand(
  t.intersection([FavoriteLocationTypes, t.literal('STOP')]),
  (x): x is t.Branded<FavoriteLocationTypes & 'STOP', FavoriteLocationTypesSTOPBrand> =>
    true,
  'FavoriteLocationTypesSTOP',
);
export type FavoriteLocationTypesSTOPBrand = {
  readonly FavoriteLocationTypesSTOP: unique symbol;
};
/** require('io-ts-validator').validator(FavoriteLocationTypesSTOP).decodeSync(defaultFavoriteLocationTypesSTOP) // => defaultFavoriteLocationTypesSTOP */
export const defaultFavoriteLocationTypesSTOP: FavoriteLocationTypesSTOP =
  'STOP' as unknown as FavoriteLocationTypesSTOP;

// PartialFavoriteLocation
// The default export. More information at the top.
export type PartialFavoriteLocation = t.Branded<
  {
    id?: number;
    identityId?: Units_c404_.IdentityId;
    type?: FavoriteLocationTypes;
    name?: string;
    location?: UnitsGeo_3e31_.Location;
    streetName?: Address_2d0a_.PlaceName;
    streetNumber?: string;
    city?: Address_2d0a_.City;
    country?: Address_2d0a_.CountryName;
    zipCode?: Address_2d0a_.ZipCode;
    agencyId?: Common_ffba_.AgencyId;
    stopId?: Station_dfde_.Id;
    lineId?: string;
  } & Record<string, unknown>,
  PartialFavoriteLocationBrand
>;
export type PartialFavoriteLocationC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: t.NumberC;
        identityId: typeof Units_c404_.IdentityId;
        type: typeof FavoriteLocationTypes;
        name: t.StringC;
        location: typeof UnitsGeo_3e31_.Location;
        streetName: typeof Address_2d0a_.PlaceName;
        streetNumber: t.StringC;
        city: typeof Address_2d0a_.City;
        country: typeof Address_2d0a_.CountryName;
        zipCode: typeof Address_2d0a_.ZipCode;
        agencyId: typeof Common_ffba_.AgencyId;
        stopId: typeof Station_dfde_.Id;
        lineId: t.StringC;
      }>,
      t.RecordC<t.StringC, t.UnknownC>,
    ]
  >,
  PartialFavoriteLocationBrand
>;
export const PartialFavoriteLocation: PartialFavoriteLocationC = t.brand(
  t.intersection([
    t.partial({
      id: t.number,
      identityId: Units_c404_.IdentityId,
      type: FavoriteLocationTypes,
      name: t.string,
      location: UnitsGeo_3e31_.Location,
      streetName: Address_2d0a_.PlaceName,
      streetNumber: t.string,
      city: Address_2d0a_.City,
      country: Address_2d0a_.CountryName,
      zipCode: Address_2d0a_.ZipCode,
      agencyId: Common_ffba_.AgencyId,
      stopId: Station_dfde_.Id,
      lineId: t.string,
    }),
    t.record(t.string, t.unknown),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: number;
      identityId?: Units_c404_.IdentityId;
      type?: FavoriteLocationTypes;
      name?: string;
      location?: UnitsGeo_3e31_.Location;
      streetName?: Address_2d0a_.PlaceName;
      streetNumber?: string;
      city?: Address_2d0a_.City;
      country?: Address_2d0a_.CountryName;
      zipCode?: Address_2d0a_.ZipCode;
      agencyId?: Common_ffba_.AgencyId;
      stopId?: Station_dfde_.Id;
      lineId?: string;
    } & Record<string, unknown>,
    PartialFavoriteLocationBrand
  > => true,
  'PartialFavoriteLocation',
);
export type PartialFavoriteLocationBrand = {
  readonly PartialFavoriteLocation: unique symbol;
};

export default PartialFavoriteLocation;

// Success
