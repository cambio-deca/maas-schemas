/*

undefined
MaaS region schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Address_2d0a_ from './components/address';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'https://schemas.maas.global/core/card.json';

// Card
// The default export. More information at the top.
export type Card = t.Branded<
  {
    issuer?: string;
    network?: string;
    expiryMonth?: number;
    expiryYear?: number;
    maskedNumber?: string;
    fundingType?: string &
      ('credit' | 'debit' | 'prepaid' | 'not_known' | 'not_applicable');
    billingCity?: Address_2d0a_.City;
    billingCountry?: Address_2d0a_.Country;
    billingZip?: Address_2d0a_.ZipCode;
  } & {
    id: Defined;
    customerId: Defined;
    status: Defined;
    valid: Defined;
  },
  CardBrand
>;
export type CardC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        issuer: t.StringC;
        network: t.StringC;
        expiryMonth: t.NumberC;
        expiryYear: t.NumberC;
        maskedNumber: t.StringC;
        fundingType: t.IntersectionC<
          [
            t.StringC,
            t.UnionC<
              [
                t.LiteralC<'credit'>,
                t.LiteralC<'debit'>,
                t.LiteralC<'prepaid'>,
                t.LiteralC<'not_known'>,
                t.LiteralC<'not_applicable'>,
              ]
            >,
          ]
        >;
        billingCity: typeof Address_2d0a_.City;
        billingCountry: typeof Address_2d0a_.Country;
        billingZip: typeof Address_2d0a_.ZipCode;
      }>,
      t.TypeC<{
        id: typeof Defined;
        customerId: typeof Defined;
        status: typeof Defined;
        valid: typeof Defined;
      }>,
    ]
  >,
  CardBrand
>;
export const Card: CardC = t.brand(
  t.intersection([
    t.partial({
      issuer: t.string,
      network: t.string,
      expiryMonth: t.number,
      expiryYear: t.number,
      maskedNumber: t.string,
      fundingType: t.intersection([
        t.string,
        t.union([
          t.literal('credit'),
          t.literal('debit'),
          t.literal('prepaid'),
          t.literal('not_known'),
          t.literal('not_applicable'),
        ]),
      ]),
      billingCity: Address_2d0a_.City,
      billingCountry: Address_2d0a_.Country,
      billingZip: Address_2d0a_.ZipCode,
    }),
    t.type({
      id: Defined,
      customerId: Defined,
      status: Defined,
      valid: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      issuer?: string;
      network?: string;
      expiryMonth?: number;
      expiryYear?: number;
      maskedNumber?: string;
      fundingType?: string &
        ('credit' | 'debit' | 'prepaid' | 'not_known' | 'not_applicable');
      billingCity?: Address_2d0a_.City;
      billingCountry?: Address_2d0a_.Country;
      billingZip?: Address_2d0a_.ZipCode;
    } & {
      id: Defined;
      customerId: Defined;
      status: Defined;
      valid: Defined;
    },
    CardBrand
  > => true,
  'Card',
);
export type CardBrand = {
  readonly Card: unique symbol;
};

export default Card;

// Success
