/*

undefined
Common definitions for API schemas

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Units_c404_ from './units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'https://schemas.maas.global/core/components/api-common.json';

// AcceptHeader
// SemVer versioning schemas for versioning our resources
export type AcceptHeader = t.Branded<string, AcceptHeaderBrand>;
export type AcceptHeaderC = t.BrandC<t.StringC, AcceptHeaderBrand>;
export const AcceptHeader: AcceptHeaderC = t.brand(
  t.string,
  (x): x is t.Branded<string, AcceptHeaderBrand> =>
    typeof x !== 'string' ||
    x.match(
      RegExp(
        '\\bapplication/json[;,]\\s*version=((0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)\\b',
        'u',
      ),
    ) !== null,
  'AcceptHeader',
);
export type AcceptHeaderBrand = {
  readonly AcceptHeader: unique symbol;
};

// UserAgentHeader
// The purpose of this remains a mystery
export type UserAgentHeader = t.Branded<string, UserAgentHeaderBrand>;
export type UserAgentHeaderC = t.BrandC<t.StringC, UserAgentHeaderBrand>;
export const UserAgentHeader: UserAgentHeaderC = t.brand(
  t.string,
  (x): x is t.Branded<string, UserAgentHeaderBrand> =>
    typeof x !== 'string' || x.length >= 1,
  'UserAgentHeader',
);
export type UserAgentHeaderBrand = {
  readonly UserAgentHeader: unique symbol;
};

// Headers
// The purpose of this remains a mystery
export type Headers = t.Branded<
  {
    accept?: AcceptHeader;
    'x-maasglobal-user-agent'?: UserAgentHeader;
  } & Record<string, unknown>,
  HeadersBrand
>;
export type HeadersC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        accept: typeof AcceptHeader;
        'x-maasglobal-user-agent': typeof UserAgentHeader;
      }>,
      t.RecordC<t.StringC, t.UnknownC>,
    ]
  >,
  HeadersBrand
>;
export const Headers: HeadersC = t.brand(
  t.intersection([
    t.partial({
      accept: AcceptHeader,
      'x-maasglobal-user-agent': UserAgentHeader,
    }),
    t.record(t.string, t.unknown),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      accept?: AcceptHeader;
      'x-maasglobal-user-agent'?: UserAgentHeader;
    } & Record<string, unknown>,
    HeadersBrand
  > => true,
  'Headers',
);
export type HeadersBrand = {
  readonly Headers: unique symbol;
};

// AppInstanceIdHeader
// The purpose of this remains a mystery
export type AppInstanceIdHeader = t.Branded<string, AppInstanceIdHeaderBrand>;
export type AppInstanceIdHeaderC = t.BrandC<t.StringC, AppInstanceIdHeaderBrand>;
export const AppInstanceIdHeader: AppInstanceIdHeaderC = t.brand(
  t.string,
  (x): x is t.Branded<string, AppInstanceIdHeaderBrand> =>
    typeof x !== 'string' || x.length >= 1,
  'AppInstanceIdHeader',
);
export type AppInstanceIdHeaderBrand = {
  readonly AppInstanceIdHeader: unique symbol;
};

// TenantHeader
// The purpose of this remains a mystery
export type TenantHeader = t.Branded<string, TenantHeaderBrand>;
export type TenantHeaderC = t.BrandC<t.StringC, TenantHeaderBrand>;
export const TenantHeader: TenantHeaderC = t.brand(
  t.string,
  (x): x is t.Branded<string, TenantHeaderBrand> =>
    typeof x !== 'string' || x.length >= 3,
  'TenantHeader',
);
export type TenantHeaderBrand = {
  readonly TenantHeader: unique symbol;
};

// StandardApiEndpointHeaders
// The purpose of this remains a mystery
export type StandardApiEndpointHeaders = t.Branded<
  ({
    accept?: AcceptHeader;
    'x-maasglobal-user-agent'?: UserAgentHeader;
    'x-maasglobal-app-instance-id'?: AppInstanceIdHeader;
    'x-maasglobal-edge-tenant'?: TenantHeader;
  } & Record<string, unknown>) & {
    accept: Defined;
    'x-maasglobal-user-agent': Defined;
    'x-maasglobal-app-instance-id': Defined;
    'x-maasglobal-edge-tenant': Defined;
  },
  StandardApiEndpointHeadersBrand
>;
export type StandardApiEndpointHeadersC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            accept: typeof AcceptHeader;
            'x-maasglobal-user-agent': typeof UserAgentHeader;
            'x-maasglobal-app-instance-id': typeof AppInstanceIdHeader;
            'x-maasglobal-edge-tenant': typeof TenantHeader;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        accept: typeof Defined;
        'x-maasglobal-user-agent': typeof Defined;
        'x-maasglobal-app-instance-id': typeof Defined;
        'x-maasglobal-edge-tenant': typeof Defined;
      }>,
    ]
  >,
  StandardApiEndpointHeadersBrand
>;
export const StandardApiEndpointHeaders: StandardApiEndpointHeadersC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        accept: AcceptHeader,
        'x-maasglobal-user-agent': UserAgentHeader,
        'x-maasglobal-app-instance-id': AppInstanceIdHeader,
        'x-maasglobal-edge-tenant': TenantHeader,
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      accept: Defined,
      'x-maasglobal-user-agent': Defined,
      'x-maasglobal-app-instance-id': Defined,
      'x-maasglobal-edge-tenant': Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      accept?: AcceptHeader;
      'x-maasglobal-user-agent'?: UserAgentHeader;
      'x-maasglobal-app-instance-id'?: AppInstanceIdHeader;
      'x-maasglobal-edge-tenant'?: TenantHeader;
    } & Record<string, unknown>) & {
      accept: Defined;
      'x-maasglobal-user-agent': Defined;
      'x-maasglobal-app-instance-id': Defined;
      'x-maasglobal-edge-tenant': Defined;
    },
    StandardApiEndpointHeadersBrand
  > => true,
  'StandardApiEndpointHeaders',
);
export type StandardApiEndpointHeadersBrand = {
  readonly StandardApiEndpointHeaders: unique symbol;
};

// ApiGatewayAuthorizedRequestContext
// The purpose of this remains a mystery
export type ApiGatewayAuthorizedRequestContext = t.Branded<
  ({
    requestId?: string;
    authorizer?: ({
      principalId?: Units_c404_.IdentityId;
    } & Record<string, unknown>) & {
      principalId: Defined;
    };
  } & Record<string, unknown>) & {
    requestId: Defined;
    authorizer: Defined;
  },
  ApiGatewayAuthorizedRequestContextBrand
>;
export type ApiGatewayAuthorizedRequestContextC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            requestId: t.StringC;
            authorizer: t.IntersectionC<
              [
                t.IntersectionC<
                  [
                    t.PartialC<{
                      principalId: typeof Units_c404_.IdentityId;
                    }>,
                    t.RecordC<t.StringC, t.UnknownC>,
                  ]
                >,
                t.TypeC<{
                  principalId: typeof Defined;
                }>,
              ]
            >;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        requestId: typeof Defined;
        authorizer: typeof Defined;
      }>,
    ]
  >,
  ApiGatewayAuthorizedRequestContextBrand
>;
export const ApiGatewayAuthorizedRequestContext: ApiGatewayAuthorizedRequestContextC =
  t.brand(
    t.intersection([
      t.intersection([
        t.partial({
          requestId: t.string,
          authorizer: t.intersection([
            t.intersection([
              t.partial({
                principalId: Units_c404_.IdentityId,
              }),
              t.record(t.string, t.unknown),
            ]),
            t.type({
              principalId: Defined,
            }),
          ]),
        }),
        t.record(t.string, t.unknown),
      ]),
      t.type({
        requestId: Defined,
        authorizer: Defined,
      }),
    ]),
    (
      x,
    ): x is t.Branded<
      ({
        requestId?: string;
        authorizer?: ({
          principalId?: Units_c404_.IdentityId;
        } & Record<string, unknown>) & {
          principalId: Defined;
        };
      } & Record<string, unknown>) & {
        requestId: Defined;
        authorizer: Defined;
      },
      ApiGatewayAuthorizedRequestContextBrand
    > => true,
    'ApiGatewayAuthorizedRequestContext',
  );
export type ApiGatewayAuthorizedRequestContextBrand = {
  readonly ApiGatewayAuthorizedRequestContext: unique symbol;
};

// ApiCommon
// The default export. More information at the top.
export type ApiCommon = t.Branded<unknown, ApiCommonBrand>;
export type ApiCommonC = t.BrandC<t.UnknownC, ApiCommonBrand>;
export const ApiCommon: ApiCommonC = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, ApiCommonBrand> => true,
  'ApiCommon',
);
export type ApiCommonBrand = {
  readonly ApiCommon: unique symbol;
};

export default ApiCommon;

// Success
