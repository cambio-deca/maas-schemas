/*

undefined
Set of booking state transitions

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import * as t from 'io-ts';
import { nonEmptyArray } from 'io-ts-types/lib/nonEmptyArray';

import * as Error_b620_ from '../error';
import * as State_2db3_ from './state';
import * as Units_c404_ from './units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'https://schemas.maas.global/core/components/state-log.json';

// ObsoleteTime
// The purpose of this remains a mystery
export type ObsoleteTime = t.Branded<string, ObsoleteTimeBrand>;
export type ObsoleteTimeC = t.BrandC<t.StringC, ObsoleteTimeBrand>;
export const ObsoleteTime: ObsoleteTimeC = t.brand(
  t.string,
  (x): x is t.Branded<string, ObsoleteTimeBrand> =>
    typeof x !== 'string' || x.match(RegExp('^[0-9]+$', 'u')) !== null,
  'ObsoleteTime',
);
export type ObsoleteTimeBrand = {
  readonly ObsoleteTime: unique symbol;
};

// BookingStateTransition
// The purpose of this remains a mystery
export type BookingStateTransition = t.Branded<
  ({
    timestamp?: Units_c404_.Time | ObsoleteTime;
    oldState?: State_2db3_.BookingState;
    newState?: State_2db3_.BookingState;
    invalid?: boolean;
    reason?: Error_b620_.Reason;
  } & Record<string, unknown>) & {
    newState: Defined;
    oldState: Defined;
    timestamp: Defined;
  },
  BookingStateTransitionBrand
>;
export type BookingStateTransitionC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            timestamp: t.UnionC<[typeof Units_c404_.Time, typeof ObsoleteTime]>;
            oldState: typeof State_2db3_.BookingState;
            newState: typeof State_2db3_.BookingState;
            invalid: t.BooleanC;
            reason: typeof Error_b620_.Reason;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        newState: typeof Defined;
        oldState: typeof Defined;
        timestamp: typeof Defined;
      }>,
    ]
  >,
  BookingStateTransitionBrand
>;
export const BookingStateTransition: BookingStateTransitionC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        timestamp: t.union([Units_c404_.Time, ObsoleteTime]),
        oldState: State_2db3_.BookingState,
        newState: State_2db3_.BookingState,
        invalid: t.boolean,
        reason: Error_b620_.Reason,
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      newState: Defined,
      oldState: Defined,
      timestamp: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      timestamp?: Units_c404_.Time | ObsoleteTime;
      oldState?: State_2db3_.BookingState;
      newState?: State_2db3_.BookingState;
      invalid?: boolean;
      reason?: Error_b620_.Reason;
    } & Record<string, unknown>) & {
      newState: Defined;
      oldState: Defined;
      timestamp: Defined;
    },
    BookingStateTransitionBrand
  > => true,
  'BookingStateTransition',
);
export type BookingStateTransitionBrand = {
  readonly BookingStateTransition: unique symbol;
};
/** require('io-ts-validator').validator(nonEmptyArray(BookingStateTransition)).decodeSync(examplesBookingStateTransition) // => examplesBookingStateTransition */
export const examplesBookingStateTransition: NonEmptyArray<BookingStateTransition> = [
  {
    reason: { text: 'INVALID_AUTHORIZATION', errorCode: 500 },
    invalid: false,
    newState: 'REJECTED',
    oldState: 'PAID',
    timestamp: 1630005341433,
  },
] as unknown as NonEmptyArray<BookingStateTransition>;

// StateLog
// The default export. More information at the top.
export type StateLog = t.Branded<Array<BookingStateTransition>, StateLogBrand>;
export type StateLogC = t.BrandC<t.ArrayC<typeof BookingStateTransition>, StateLogBrand>;
export const StateLog: StateLogC = t.brand(
  t.array(BookingStateTransition),
  (x): x is t.Branded<Array<BookingStateTransition>, StateLogBrand> => true,
  'StateLog',
);
export type StateLogBrand = {
  readonly StateLog: unique symbol;
};
/** require('io-ts-validator').validator(nonEmptyArray(StateLog)).decodeSync(examplesStateLog) // => examplesStateLog */
export const examplesStateLog: NonEmptyArray<StateLog> = [
  [
    {
      reason: {},
      invalid: false,
      newState: 'PENDING',
      oldState: 'START',
      timestamp: 1630003779687,
    },
    {
      reason: {},
      invalid: false,
      newState: 'PAID',
      oldState: 'PENDING',
      timestamp: 1630003780198,
    },
    {
      reason: { text: 'INVALID_AUTHORIZATION', errorCode: 500 },
      invalid: false,
      newState: 'REJECTED',
      oldState: 'PAID',
      timestamp: 1630005341433,
    },
  ],
] as unknown as NonEmptyArray<StateLog>;

export default StateLog;

// Success
