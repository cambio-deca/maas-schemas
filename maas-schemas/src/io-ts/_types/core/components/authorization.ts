/*

undefined
MaaS information about an authorization required to use a particular TSP

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

import * as Common_ffba_ from './common';
import * as Units_c404_ from './units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'https://schemas.maas.global/core/components/authorization.json';

// Authorization
// The default export. More information at the top.
export type Authorization = t.Branded<
  {
    agencyId?: Common_ffba_.AgencyId;
    state?: string & ('VALID' | 'INVALID');
    validTo?: Units_c404_.Time;
    created?: Units_c404_.Time;
    modified?: Units_c404_.Time;
  } & {
    agencyId: Defined;
    state: Defined;
    validTo: Defined;
    created: Defined;
  },
  AuthorizationBrand
>;
export type AuthorizationC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        agencyId: typeof Common_ffba_.AgencyId;
        state: t.IntersectionC<
          [t.StringC, t.UnionC<[t.LiteralC<'VALID'>, t.LiteralC<'INVALID'>]>]
        >;
        validTo: typeof Units_c404_.Time;
        created: typeof Units_c404_.Time;
        modified: typeof Units_c404_.Time;
      }>,
      t.TypeC<{
        agencyId: typeof Defined;
        state: typeof Defined;
        validTo: typeof Defined;
        created: typeof Defined;
      }>,
    ]
  >,
  AuthorizationBrand
>;
export const Authorization: AuthorizationC = t.brand(
  t.intersection([
    t.partial({
      agencyId: Common_ffba_.AgencyId,
      state: t.intersection([
        t.string,
        t.union([t.literal('VALID'), t.literal('INVALID')]),
      ]),
      validTo: Units_c404_.Time,
      created: Units_c404_.Time,
      modified: Units_c404_.Time,
    }),
    t.type({
      agencyId: Defined,
      state: Defined,
      validTo: Defined,
      created: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      agencyId?: Common_ffba_.AgencyId;
      state?: string & ('VALID' | 'INVALID');
      validTo?: Units_c404_.Time;
      created?: Units_c404_.Time;
      modified?: Units_c404_.Time;
    } & {
      agencyId: Defined;
      state: Defined;
      validTo: Defined;
      created: Defined;
    },
    AuthorizationBrand
  > => true,
  'Authorization',
);
export type AuthorizationBrand = {
  readonly Authorization: unique symbol;
};

export default Authorization;

// Success
