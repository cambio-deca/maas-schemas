/*

undefined
Base schema for MODE_CAR* metas

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import * as t from 'io-ts';
import { nonEmptyArray } from 'io-ts-types/lib/nonEmptyArray';

import * as ACRISS_522e_ from './ACRISS';
import * as Ajv_5e26_ from './ajv';
import * as Common_ffba_ from './common';
import * as Units_c404_ from './units';
import * as UnitsGeo_3e31_ from './units-geo';
import * as Vehicle_52ac_ from './vehicle';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export type NullBrand = {
  readonly Null: unique symbol;
};
export type NullC = t.BrandC<t.UnknownC, NullBrand>;
export const Null: NullC = t.brand(
  t.unknown,
  (n): n is t.Branded<unknown, NullBrand> => n === null,
  'Null',
);
export type Null = t.TypeOf<typeof Null>;

export const schemaId = 'https://schemas.maas.global/core/components/car-rental.json';

// Instruction
// The purpose of this remains a mystery
export type Instruction = t.Branded<
  {
    title?: string;
    icon?: Units_c404_.Url;
    text?: string;
    image?: Units_c404_.Url;
  } & (
    | {
        title: Defined;
        text: Defined;
      }
    | {
        title: Defined;
        image: Defined;
      }
  ),
  InstructionBrand
>;
export type InstructionC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        title: t.StringC;
        icon: typeof Units_c404_.Url;
        text: t.StringC;
        image: typeof Units_c404_.Url;
      }>,
      t.UnionC<
        [
          t.TypeC<{
            title: typeof Defined;
            text: typeof Defined;
          }>,
          t.TypeC<{
            title: typeof Defined;
            image: typeof Defined;
          }>,
        ]
      >,
    ]
  >,
  InstructionBrand
>;
export const Instruction: InstructionC = t.brand(
  t.intersection([
    t.partial({
      title: t.string,
      icon: Units_c404_.Url,
      text: t.string,
      image: Units_c404_.Url,
    }),
    t.union([
      t.type({
        title: Defined,
        text: Defined,
      }),
      t.type({
        title: Defined,
        image: Defined,
      }),
    ]),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      title?: string;
      icon?: Units_c404_.Url;
      text?: string;
      image?: Units_c404_.Url;
    } & (
      | {
          title: Defined;
          text: Defined;
        }
      | {
          title: Defined;
          image: Defined;
        }
    ),
    InstructionBrand
  > => true,
  'Instruction',
);
export type InstructionBrand = {
  readonly Instruction: unique symbol;
};
/** require('io-ts-validator').validator(nonEmptyArray(Instruction)).decodeSync(examplesInstruction) // => examplesInstruction */
export const examplesInstruction: NonEmptyArray<Instruction> = [
  { title: 'TITLE', text: 'DESCRIPTION' },
  { title: 'TITLE', image: 'https://example.com/image.jpg' },
  {
    title: 'TITLE',
    image: 'https://example.com/image.jpg',
    icon: 'https://example.com/image.jpg',
  },
] as unknown as NonEmptyArray<Instruction>;
// NEGATIVE Test Case: title without other propreties
/** require('io-ts-validator').validator(Instruction).decodeEither({"title":"TITLE"})._tag // => 'Left' */

// CarRental
// The default export. More information at the top.
export type CarRental = t.Branded<
  {
    id?: string & Vehicle_52ac_.VehicleId;
    name?: string;
    description?: string;
    image?: Units_c404_.Url;
    vendor?: {
      voucher?: unknown;
    } & Record<string, unknown>;
    terms?: unknown;
    car?: {
      passengers?: number;
      doors?: Array<number>;
      luggage?: Array<number>;
      transmission?: 'manual' | 'automatic' | Null;
      fuel?:
        | (
            | 'diesel'
            | 'electric'
            | 'ethanol'
            | 'gasoline'
            | 'hybrid'
            | 'hydrogen'
            | 'lpg'
            | 'multifuel'
            | 'unspecified'
          )
        | Null;
      classification?: ACRISS_522e_.ACRISS | Ajv_5e26_.StringCoarsedNull;
      registrationPlate?: string;
      damage?: string;
      fuelLevel?: number;
      location?: UnitsGeo_3e31_.Location;
    } & Record<string, unknown>;
    freeUntil?: Units_c404_.Time;
    nextBooking?: {
      startTime?: Units_c404_.Time;
      endTime?: Units_c404_.Time;
    } & Record<string, unknown>;
    pickupInfo?: Common_ffba_.HtmlBlock;
    returnInfo?: Common_ffba_.HtmlBlock;
    startEndGeoRegionUrl?: Units_c404_.Url;
    instructions?: Array<Instruction>;
  } & {
    name: Defined;
    description: Defined;
    image: Defined;
  },
  CarRentalBrand
>;
export type CarRentalC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: t.IntersectionC<[t.StringC, typeof Vehicle_52ac_.VehicleId]>;
        name: t.StringC;
        description: t.StringC;
        image: typeof Units_c404_.Url;
        vendor: t.IntersectionC<
          [
            t.PartialC<{
              voucher: t.UnknownC;
            }>,
            t.RecordC<t.StringC, t.UnknownC>,
          ]
        >;
        terms: t.UnknownC;
        car: t.IntersectionC<
          [
            t.PartialC<{
              passengers: t.NumberC;
              doors: t.ArrayC<t.NumberC>;
              luggage: t.ArrayC<t.NumberC>;
              transmission: t.UnionC<
                [t.LiteralC<'manual'>, t.LiteralC<'automatic'>, typeof Null]
              >;
              fuel: t.UnionC<
                [
                  t.UnionC<
                    [
                      t.LiteralC<'diesel'>,
                      t.LiteralC<'electric'>,
                      t.LiteralC<'ethanol'>,
                      t.LiteralC<'gasoline'>,
                      t.LiteralC<'hybrid'>,
                      t.LiteralC<'hydrogen'>,
                      t.LiteralC<'lpg'>,
                      t.LiteralC<'multifuel'>,
                      t.LiteralC<'unspecified'>,
                    ]
                  >,
                  typeof Null,
                ]
              >;
              classification: t.UnionC<
                [typeof ACRISS_522e_.ACRISS, typeof Ajv_5e26_.StringCoarsedNull]
              >;
              registrationPlate: t.StringC;
              damage: t.StringC;
              fuelLevel: t.NumberC;
              location: typeof UnitsGeo_3e31_.Location;
            }>,
            t.RecordC<t.StringC, t.UnknownC>,
          ]
        >;
        freeUntil: typeof Units_c404_.Time;
        nextBooking: t.IntersectionC<
          [
            t.PartialC<{
              startTime: typeof Units_c404_.Time;
              endTime: typeof Units_c404_.Time;
            }>,
            t.RecordC<t.StringC, t.UnknownC>,
          ]
        >;
        pickupInfo: typeof Common_ffba_.HtmlBlock;
        returnInfo: typeof Common_ffba_.HtmlBlock;
        startEndGeoRegionUrl: typeof Units_c404_.Url;
        instructions: t.ArrayC<typeof Instruction>;
      }>,
      t.TypeC<{
        name: typeof Defined;
        description: typeof Defined;
        image: typeof Defined;
      }>,
    ]
  >,
  CarRentalBrand
>;
export const CarRental: CarRentalC = t.brand(
  t.intersection([
    t.partial({
      id: t.intersection([t.string, Vehicle_52ac_.VehicleId]),
      name: t.string,
      description: t.string,
      image: Units_c404_.Url,
      vendor: t.intersection([
        t.partial({
          voucher: t.unknown,
        }),
        t.record(t.string, t.unknown),
      ]),
      terms: t.unknown,
      car: t.intersection([
        t.partial({
          passengers: t.number,
          doors: t.array(t.number),
          luggage: t.array(t.number),
          transmission: t.union([t.literal('manual'), t.literal('automatic'), Null]),
          fuel: t.union([
            t.union([
              t.literal('diesel'),
              t.literal('electric'),
              t.literal('ethanol'),
              t.literal('gasoline'),
              t.literal('hybrid'),
              t.literal('hydrogen'),
              t.literal('lpg'),
              t.literal('multifuel'),
              t.literal('unspecified'),
            ]),
            Null,
          ]),
          classification: t.union([ACRISS_522e_.ACRISS, Ajv_5e26_.StringCoarsedNull]),
          registrationPlate: t.string,
          damage: t.string,
          fuelLevel: t.number,
          location: UnitsGeo_3e31_.Location,
        }),
        t.record(t.string, t.unknown),
      ]),
      freeUntil: Units_c404_.Time,
      nextBooking: t.intersection([
        t.partial({
          startTime: Units_c404_.Time,
          endTime: Units_c404_.Time,
        }),
        t.record(t.string, t.unknown),
      ]),
      pickupInfo: Common_ffba_.HtmlBlock,
      returnInfo: Common_ffba_.HtmlBlock,
      startEndGeoRegionUrl: Units_c404_.Url,
      instructions: t.array(Instruction),
    }),
    t.type({
      name: Defined,
      description: Defined,
      image: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: string & Vehicle_52ac_.VehicleId;
      name?: string;
      description?: string;
      image?: Units_c404_.Url;
      vendor?: {
        voucher?: unknown;
      } & Record<string, unknown>;
      terms?: unknown;
      car?: {
        passengers?: number;
        doors?: Array<number>;
        luggage?: Array<number>;
        transmission?: 'manual' | 'automatic' | Null;
        fuel?:
          | (
              | 'diesel'
              | 'electric'
              | 'ethanol'
              | 'gasoline'
              | 'hybrid'
              | 'hydrogen'
              | 'lpg'
              | 'multifuel'
              | 'unspecified'
            )
          | Null;
        classification?: ACRISS_522e_.ACRISS | Ajv_5e26_.StringCoarsedNull;
        registrationPlate?: string;
        damage?: string;
        fuelLevel?: number;
        location?: UnitsGeo_3e31_.Location;
      } & Record<string, unknown>;
      freeUntil?: Units_c404_.Time;
      nextBooking?: {
        startTime?: Units_c404_.Time;
        endTime?: Units_c404_.Time;
      } & Record<string, unknown>;
      pickupInfo?: Common_ffba_.HtmlBlock;
      returnInfo?: Common_ffba_.HtmlBlock;
      startEndGeoRegionUrl?: Units_c404_.Url;
      instructions?: Array<Instruction>;
    } & {
      name: Defined;
      description: Defined;
      image: Defined;
    },
    CarRentalBrand
  > => true,
  'CarRental',
);
export type CarRentalBrand = {
  readonly CarRental: unique symbol;
};

export default CarRental;

// Success
